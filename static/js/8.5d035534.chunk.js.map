{"version":3,"sources":["../node_modules/@apollo/client/react/data/MutationData.js","../node_modules/@apollo/client/react/hooks/useMutation.js","views/Test/index.tsx"],"names":["_super","MutationData","_a","options","context","result","setResult","_this","call","this","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","then","response","onMutationCompleted","catch","error","onMutationError","getOptions","onError","verifyDocumentType","mutation","Mutation","mostRecentMutationId","prototype","execute","isMounted","client","refreshClient","afterExecute","unmount","bind","cleanup","variables","optimisticResponse","update","_b","mutationContext","_c","awaitRefetchQueries","fetchPolicy","errorPolicy","mutateOptions","mutateVariables","Object","assign","refetchQueries","loading","ignoreResults","updateResult","undefined","data","called","onCompleted","errors","length","ApolloError","graphQLErrors","isMostRecentMutation","previousResult","useMutation","updatedOptions","mutationDataRef","mutationData","current","setOptions","UPLOAD_FILE","gql","Test","console","log","upload_file_oss","type","onChange","e","dir","currentTarget","validity","file","files"],"mappings":"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","file":"static/js/8.5d035534.chunk.js","sourcesContent":["import { __extends, __assign } from 'tslib';\nimport { equal } from '@wry/equality';\nimport { ApolloError } from '../../errors/ApolloError.js';\nimport { DocumentType } from '../parser/parser.js';\nimport { OperationData } from './OperationData.js';\n\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n\n  function MutationData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        result = _a.result,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n\n      _this.onMutationStart();\n\n      var mutationId = _this.generateNewMutationId();\n\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n\n        return response;\n      }).catch(function (error) {\n        _this.onMutationError(error, mutationId);\n\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [this.runMutation, __assign(__assign({}, result), {\n      client: this.refreshClient().client\n    })];\n  };\n\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n\n  MutationData.prototype.cleanup = function () {};\n\n  MutationData.prototype.mutate = function (mutationFunctionOptions) {\n    var _a = this.getOptions(),\n        mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        update = _a.update,\n        _b = _a.context,\n        mutationContext = _b === void 0 ? {} : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        fetchPolicy = _a.fetchPolicy,\n        errorPolicy = _a.errorPolicy;\n\n    var mutateOptions = __assign({}, mutationFunctionOptions);\n\n    var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n    return this.refreshClient().client.mutate(__assign({\n      mutation: mutation,\n      optimisticResponse: optimisticResponse,\n      refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries: awaitRefetchQueries,\n      update: update,\n      context: mutationContext,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      variables: mutateVariables\n    }, mutateOptions));\n  };\n\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n        onCompleted = _a.onCompleted,\n        ignoreResults = _a.ignoreResults;\n\n    var data = response.data,\n        errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n\n    var callOncomplete = function callOncomplete() {\n      return onCompleted ? onCompleted(data) : null;\n    };\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n\n    callOncomplete();\n  };\n\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  };\n\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n\n  return MutationData;\n}(OperationData);\n\nexport { MutationData };","import { __assign } from 'tslib';\nimport { useContext, useState, useRef, useEffect } from 'react';\nimport { getApolloContext } from '../context/ApolloContext.js';\nimport { MutationData } from '../data/MutationData.js';\n\nfunction useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    called: false,\n    loading: false\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n\n    return mutationDataRef.current;\n  }\n\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}\n\nexport { useMutation };","import * as React from \"react\";\nimport { useMutation, gql } from \"@apollo/client\";\n\nconst UPLOAD_FILE = gql`\n  mutation($file: Upload!) {\n    upload_file_oss(file: $file)\n  }\n`;\n\nconst Test: React.FC = () => {\n  const [upload_file_oss] = useMutation(UPLOAD_FILE, {\n    onCompleted(data) {\n      console.log(data);\n    },\n    onError(error) {\n      console.log(error);\n    }\n  });\n\n  const fileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    console.dir(e.currentTarget);\n    const {\n      validity,\n      files: [file]\n    } = e.currentTarget;\n    if (validity) {\n      upload_file_oss({ variables: { file } });\n      console.log(file);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <input type=\"file\" onChange={fileChange} />\n      </div>\n    </div>\n  );\n};\n\nexport default Test;\n"],"sourceRoot":""}