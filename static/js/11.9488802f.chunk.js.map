{"version":3,"sources":["components/app/Input/input.d.ts","components/app/Input/useEditableInput.tsx","components/app/Input/EditableInput.tsx","components/app/Input/index.ts","../node_modules/@material-ui/core/esm/Input/Input.js","../node_modules/@material-ui/core/esm/InputAdornment/InputAdornment.js","../node_modules/@material-ui/icons/esm/Edit.js","views/Test/index.tsx"],"names":["InputStatus","useEditableInput","initValue","React","value","setValue","e","target","useStyles","makeStyles","theme","createStyles","root","color","input","borderColor","body2","typography","body1","caption","button","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","overline","inherit","normalRoot","position","toolIcon","top","spacing","cursor","EditableInput","props","onChange","placeholder","variant","rest","classes","NORMAL","status","setStatus","ClickAwayListener","onClickAway","Input","fullWidth","multiline","className","startAdornment","InputAdornment","IconButton","size","onClick","EDITING","Edit","fontSize","readOnly","disableUnderline","ref","_props$fullWidth","_props$inputComponent","inputComponent","_props$multiline","_props$type","type","other","underline","muiName","bottomLineColor","palette","formControl","marginTop","focused","disabled","colorSecondary","borderBottomColor","secondary","main","borderBottom","concat","primary","left","bottom","content","right","transform","transition","transitions","create","duration","shorter","easing","easeOut","pointerEvents","error","text","borderBottomStyle","marginDense","inputMarginDense","inputMultiline","inputTypeSearch","name","children","_props$component","component","Component","_props$disablePointer","disablePointerEvents","_props$disableTypogra","disableTypography","variantProp","muiFormControl","Provider","hiddenLabel","filled","positionStart","positionEnd","margin","display","height","maxHeight","alignItems","whiteSpace","marginRight","marginLeft","createElement","d","Test","title","setTitle","rows"],"mappings":"mGA+BYA,E,eC7BCC,EAAmB,SAACC,GAAiC,IAAD,EACrCC,WAAeD,GADsB,mBACxDE,EADwD,KACjDC,EADiD,KAS/D,MAAO,CAACD,EANS,SACfE,GAEAD,EAASC,EAAEC,OAAOH,U,wEDuBVJ,O,mBAAAA,I,sBAAAA,M,kBElBNQ,EAAYC,aAAW,SAACC,GAC5B,OAAOC,YAAa,CAClBC,KAAM,CACJC,MAAO,WAETC,MAAO,CACLC,YAAa,eAGfC,MAAON,EAAMO,WAAWD,MAExBE,MAAOR,EAAMO,WAAWC,MAExBC,QAAST,EAAMO,WAAWE,QAE1BC,OAAQV,EAAMO,WAAWG,OAEzBC,GAAIX,EAAMO,WAAWI,GAErBC,GAAIZ,EAAMO,WAAWK,GAErBC,GAAIb,EAAMO,WAAWM,GAErBC,GAAId,EAAMO,WAAWO,GAErBC,GAAIf,EAAMO,WAAWQ,GAErBC,GAAIhB,EAAMO,WAAWS,GAErBC,UAAWjB,EAAMO,WAAWU,UAE5BC,UAAWlB,EAAMO,WAAWW,UAE5BC,SAAUnB,EAAMO,WAAWY,SAE3BC,QAAS,GAETC,WAAY,CACVC,SAAU,YAGZC,SAAU,CACRD,SAAU,WACVE,IAAKxB,EAAMyB,SAAS,GACpBC,OAAQ,gBAKDC,EAA0C,SAAAC,GAAU,IACvDlC,EAA+DkC,EAA/DlC,MAAOmC,EAAwDD,EAAxDC,SAAUC,EAA8CF,EAA9CE,YADqC,EACSF,EAAjCG,eADwB,MACd,UADc,EACAC,EADA,YACSJ,EADT,8CAExDK,EAAUnC,IAF8C,EAGlCL,WAA4BH,EAAY4C,QAHN,mBAGvDC,EAHuD,KAG/CC,EAH+C,KAW9D,OACE,gBAACC,EAAA,EAAD,CAAmBC,YAPG,WAClBH,IAAW7C,EAAY4C,QACzBE,EAAU9C,EAAY4C,UAMtB,gBAACK,EAAA,EAAD,eACEN,QAAS,CACP/B,KAAM+B,EAAQ/B,MAEhBsC,WAAS,EACTC,WAAS,EACTC,UAAWT,EAAQF,GACnBrC,MAAOA,EACPmC,SAAUA,EACVC,YAAaA,GACTE,EAVN,CAWEW,eACER,IAAW7C,EAAY4C,OACrB,gBAACU,EAAA,EAAD,CAAgBtB,SAAS,SACvB,gBAACuB,EAAA,EAAD,CACEC,KAAK,QACL3C,MAAM,UACN4C,QAAS,kBAAMX,EAAU9C,EAAY0D,WAErC,gBAACC,EAAA,EAAD,CAAMC,SAAS,YAGjB,KAENC,SAAUhB,IAAW7C,EAAY4C,OACjCkB,iBAAkBjB,IAAW7C,EAAY4C,YCpGjD,qE,iCCAA,uDAkHIK,EAAqB,cAAiB,SAAeX,EAAOyB,GAC9D,IAAID,EAAmBxB,EAAMwB,iBACzBnB,EAAUL,EAAMK,QAChBqB,EAAmB1B,EAAMY,UACzBA,OAAiC,IAArBc,GAAsCA,EAClDC,EAAwB3B,EAAM4B,eAC9BA,OAA2C,IAA1BD,EAAmC,QAAUA,EAC9DE,EAAmB7B,EAAMa,UACzBA,OAAiC,IAArBgB,GAAsCA,EAClDC,EAAc9B,EAAM+B,KACpBA,OAAuB,IAAhBD,EAAyB,OAASA,EACzCE,EAAQ,YAAyBhC,EAAO,CAAC,mBAAoB,UAAW,YAAa,iBAAkB,YAAa,SAExH,OAAoB,gBAAoB,IAAW,YAAS,CAC1DK,QAAS,YAAS,GAAIA,EAAS,CAC7B/B,KAAM,YAAK+B,EAAQ/B,MAAOkD,GAAoBnB,EAAQ4B,WACtDA,UAAW,OAEbrB,UAAWA,EACXgB,eAAgBA,EAChBf,UAAWA,EACXY,IAAKA,EACLM,KAAMA,GACLC,OAoJLrB,EAAMuB,QAAU,QACD,iBAtRK,SAAgB9D,GAClC,IACI+D,EAD+B,UAAvB/D,EAAMgE,QAAQL,KACI,sBAAwB,2BACtD,MAAO,CAELzD,KAAM,CACJoB,SAAU,YAIZ2C,YAAa,CACX,YAAa,CACXC,UAAW,KAKfC,QAAS,GAGTC,SAAU,GAGVC,eAAgB,CACd,oBAAqB,CACnBC,kBAAmBtE,EAAMgE,QAAQO,UAAUC,OAK/CX,UAAW,CACT,UAAW,CACTY,aAAc,aAAaC,OAAO1E,EAAMgE,QAAQW,QAAQH,MACxDI,KAAM,EACNC,OAAQ,EAERC,QAAS,KACTxD,SAAU,WACVyD,MAAO,EACPC,UAAW,YACXC,WAAYjF,EAAMkF,YAAYC,OAAO,YAAa,CAChDC,SAAUpF,EAAMkF,YAAYE,SAASC,QACrCC,OAAQtF,EAAMkF,YAAYI,OAAOC,UAEnCC,cAAe,QAGjB,kBAAmB,CACjBR,UAAW,aAEb,gBAAiB,CACfV,kBAAmBtE,EAAMgE,QAAQyB,MAAMjB,KACvCQ,UAAW,aAGb,WAAY,CACVP,aAAc,aAAaC,OAAOX,GAClCa,KAAM,EACNC,OAAQ,EAERC,QAAS,WACTxD,SAAU,WACVyD,MAAO,EACPE,WAAYjF,EAAMkF,YAAYC,OAAO,sBAAuB,CAC1DC,SAAUpF,EAAMkF,YAAYE,SAASC,UAEvCG,cAAe,QAGjB,gCAAiC,CAC/Bf,aAAc,aAAaC,OAAO1E,EAAMgE,QAAQ0B,KAAKf,SAErD,uBAAwB,CACtBF,aAAc,aAAaC,OAAOX,KAGtC,oBAAqB,CACnB4B,kBAAmB,WAKvBF,MAAO,GAGPG,YAAa,GAGbnD,UAAW,GAGXD,UAAW,GAGXpC,MAAO,GAGPyF,iBAAkB,GAGlBC,eAAgB,GAGhBC,gBAAiB,MA+Ka,CAChCC,KAAM,YADO,CAEZzD,I,iCChSH,gEA+CIK,EAA8B,cAAiB,SAAwBhB,EAAOyB,GAChF,IAAI4C,EAAWrE,EAAMqE,SACjBhE,EAAUL,EAAMK,QAChBS,EAAYd,EAAMc,UAClBwD,EAAmBtE,EAAMuE,UACzBC,OAAiC,IAArBF,EAA8B,MAAQA,EAClDG,EAAwBzE,EAAM0E,qBAC9BA,OAAiD,IAA1BD,GAA2CA,EAClEE,EAAwB3E,EAAM4E,kBAC9BA,OAA8C,IAA1BD,GAA2CA,EAC/DjF,EAAWM,EAAMN,SACjBmF,EAAc7E,EAAMG,QACpB6B,EAAQ,YAAyBhC,EAAO,CAAC,WAAY,UAAW,YAAa,YAAa,uBAAwB,oBAAqB,WAAY,YAEnJ8E,EAAiB,eAAoB,GACrC3E,EAAU0E,EAcd,OAZIA,GAAeC,EAAe3E,QAQ9B2E,IAAmB3E,IACrBA,EAAU2E,EAAe3E,SAGP,gBAAoB,IAAmB4E,SAAU,CACnEjH,MAAO,MACO,gBAAoB0G,EAAW,YAAS,CACtD1D,UAAW,YAAKT,EAAQ/B,KAAMwC,EAAW4D,GAAwBrE,EAAQqE,qBAAsBI,EAAeE,aAAe3E,EAAQ2E,YAAyB,WAAZ7E,GAAwBE,EAAQ4E,OAAQ,CACxL,MAAS5E,EAAQ6E,cACjB,IAAO7E,EAAQ8E,aACfzF,GAAqC,UAA1BoF,EAAeM,QAAsB/E,EAAQ2D,aAC1DvC,IAAKA,GACJO,GAA4B,kBAAbqC,GAA0BO,EAE7BP,EAF8D,gBAAoB,IAAY,CAC3G9F,MAAO,iBACN8F,QAuDU,gBArIK,CAElB/F,KAAM,CACJ+G,QAAS,OACTC,OAAQ,SAERC,UAAW,MACXC,WAAY,SACZC,WAAY,UAIdR,OAAQ,CACN,oCAAqC,CACnC3C,UAAW,KAKf4C,cAAe,CACbQ,YAAa,GAIfP,YAAa,CACXQ,WAAY,GAIdjB,qBAAsB,CACpBd,cAAe,QAIjBoB,YAAa,GAGbhB,YAAa,IAgGmB,CAChCI,KAAM,qBADO,CAEZpD,I,iCC/IH,4BAEe,gBAAc,IAAM4E,cAAc,OAAQ,CACvDC,EAAG,wJACD,S,oECeWC,UAhBQ,WAAO,IAAD,EACDnI,YAAiB,IADhB,mBACpBoI,EADoB,KACbC,EADa,KAG3B,OACE,2BACE,gBAAC,IAAD,CACE7F,QAAQ,KACRrC,MAAOiI,EACP9F,SAAU+F,EACV9F,YAAY,iCACZ+F,KAAM","file":"static/js/11.9488802f.chunk.js","sourcesContent":["import { InputProps } from \"@material-ui/core\";\n\nconst variantProps = [\n  \"body1\",\n  \"body2\",\n  \"button\",\n  \"caption\",\n  \"h1\",\n  \"h2\",\n  \"h3\",\n  \"h4\",\n  \"h5\",\n  \"h6\",\n  \"inherit\",\n  \"overline\",\n  \"subtitle1\",\n  \"subtitle2\"\n] as const;\n\nexport interface BaseInputAttributes {\n  placeholder?: string;\n\n  variant?: typeof variantProps[number];\n}\n\nexport interface BaseInputProps extends InputProps, BaseInputAttributes {\n  value: any;\n\n  onChange?(e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>): void;\n}\n\nexport enum InputStatus {\n  NORMAL = 0, // 默认状态\n\n  EDITING = 1 // 编辑中\n}\n","import * as React from \"react\";\n\nexport const useEditableInput = (initValue?: any): [any, any] => {\n  const [value, setValue] = React.useState(initValue);\n\n  const onChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setValue(e.target.value);\n  };\n\n  return [value, onChange];\n};\n","import * as React from \"react\";\nimport {\n  Input,\n  makeStyles,\n  Theme,\n  createStyles,\n  InputAdornment,\n  IconButton,\n  ClickAwayListener\n} from \"@material-ui/core\";\nimport { BaseInputProps, InputStatus } from \"./input.d\";\nimport { Edit } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme: Theme) => {\n  return createStyles({\n    root: {\n      color: \"inherit\"\n    },\n    input: {\n      borderColor: \"transparent\"\n    },\n    /* Styles applied to the root element if `variant=\"body2\"`. */\n    body2: theme.typography.body2,\n    /* Styles applied to the root element if `variant=\"body1\"`. */\n    body1: theme.typography.body1,\n    /* Styles applied to the root element if `variant=\"caption\"`. */\n    caption: theme.typography.caption,\n    /* Styles applied to the root element if `variant=\"button\"`. */\n    button: theme.typography.button,\n    /* Styles applied to the root element if `variant=\"h1\"`. */\n    h1: theme.typography.h1,\n    /* Styles applied to the root element if `variant=\"h2\"`. */\n    h2: theme.typography.h2,\n    /* Styles applied to the root element if `variant=\"h3\"`. */\n    h3: theme.typography.h3,\n    /* Styles applied to the root element if `variant=\"h4\"`. */\n    h4: theme.typography.h4,\n    /* Styles applied to the root element if `variant=\"h5\"`. */\n    h5: theme.typography.h5,\n    /* Styles applied to the root element if `variant=\"h6\"`. */\n    h6: theme.typography.h6,\n    /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n    subtitle1: theme.typography.subtitle1,\n    /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n    subtitle2: theme.typography.subtitle2,\n    /* Styles applied to the root element if `variant=\"overline\"`. */\n    overline: theme.typography.overline,\n    /* Styles applied to the root element if `variant=\"inherit\"`. */\n    inherit: {},\n\n    normalRoot: {\n      position: \"relative\"\n    },\n\n    toolIcon: {\n      position: \"relative\",\n      top: theme.spacing(-1),\n      cursor: \"pointer\"\n    }\n  });\n});\n\nexport const EditableInput: React.FC<BaseInputProps> = props => {\n  const { value, onChange, placeholder, variant = \"inherit\", ...rest } = props;\n  const classes = useStyles();\n  const [status, setStatus] = React.useState<InputStatus>(InputStatus.NORMAL);\n\n  const handleClickAway = () => {\n    if (status !== InputStatus.NORMAL) {\n      setStatus(InputStatus.NORMAL);\n    }\n  };\n\n  return (\n    <ClickAwayListener onClickAway={handleClickAway}>\n      <Input\n        classes={{\n          root: classes.root\n        }}\n        fullWidth\n        multiline\n        className={classes[variant]}\n        value={value}\n        onChange={onChange}\n        placeholder={placeholder}\n        {...rest}\n        startAdornment={\n          status === InputStatus.NORMAL ? (\n            <InputAdornment position=\"start\">\n              <IconButton\n                size=\"small\"\n                color=\"inherit\"\n                onClick={() => setStatus(InputStatus.EDITING)}\n              >\n                <Edit fontSize=\"small\" />\n              </IconButton>\n            </InputAdornment>\n          ) : null\n        }\n        readOnly={status === InputStatus.NORMAL}\n        disableUnderline={status === InputStatus.NORMAL}\n        // onBlur={() => setStatus(InputStatus.NORMAL)}\n      />\n    </ClickAwayListener>\n  );\n};\n","export * from \"./useEditableInput\";\nexport * from \"./EditableInput\";\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport InputBase from '../InputBase';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  var light = theme.palette.type === 'light';\n  var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative'\n    },\n\n    /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: {\n      'label + &': {\n        marginTop: 16\n      }\n    },\n\n    /* Styles applied to the root element if the component is focused. */\n    focused: {},\n\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if color secondary. */\n    colorSecondary: {\n      '&$underline:after': {\n        borderBottomColor: theme.palette.secondary.main\n      }\n    },\n\n    /* Styles applied to the root element if `disableUnderline={false}`. */\n    underline: {\n      '&:after': {\n        borderBottom: \"2px solid \".concat(theme.palette.primary.main),\n        left: 0,\n        bottom: 0,\n        // Doing the other way around crash on IE 11 \"''\" https://github.com/cssinjs/jss/issues/242\n        content: '\"\"',\n        position: 'absolute',\n        right: 0,\n        transform: 'scaleX(0)',\n        transition: theme.transitions.create('transform', {\n          duration: theme.transitions.duration.shorter,\n          easing: theme.transitions.easing.easeOut\n        }),\n        pointerEvents: 'none' // Transparent to the hover style.\n\n      },\n      '&$focused:after': {\n        transform: 'scaleX(1)'\n      },\n      '&$error:after': {\n        borderBottomColor: theme.palette.error.main,\n        transform: 'scaleX(1)' // error is always underlined in red\n\n      },\n      '&:before': {\n        borderBottom: \"1px solid \".concat(bottomLineColor),\n        left: 0,\n        bottom: 0,\n        // Doing the other way around crash on IE 11 \"''\" https://github.com/cssinjs/jss/issues/242\n        content: '\"\\\\00a0\"',\n        position: 'absolute',\n        right: 0,\n        transition: theme.transitions.create('border-bottom-color', {\n          duration: theme.transitions.duration.shorter\n        }),\n        pointerEvents: 'none' // Transparent to the hover style.\n\n      },\n      '&:hover:not($disabled):before': {\n        borderBottom: \"2px solid \".concat(theme.palette.text.primary),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          borderBottom: \"1px solid \".concat(bottomLineColor)\n        }\n      },\n      '&$disabled:before': {\n        borderBottomStyle: 'dotted'\n      }\n    },\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    marginDense: {},\n\n    /* Styles applied to the root element if `multiline={true}`. */\n    multiline: {},\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {},\n\n    /* Styles applied to the `input` element. */\n    input: {},\n\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    inputMarginDense: {},\n\n    /* Styles applied to the `input` element if `multiline={true}`. */\n    inputMultiline: {},\n\n    /* Styles applied to the `input` element if `type=\"search\"`. */\n    inputTypeSearch: {}\n  };\n};\nvar Input = /*#__PURE__*/React.forwardRef(function Input(props, ref) {\n  var disableUnderline = props.disableUnderline,\n      classes = props.classes,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      _props$inputComponent = props.inputComponent,\n      inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      _props$type = props.type,\n      type = _props$type === void 0 ? 'text' : _props$type,\n      other = _objectWithoutProperties(props, [\"disableUnderline\", \"classes\", \"fullWidth\", \"inputComponent\", \"multiline\", \"type\"]);\n\n  return /*#__PURE__*/React.createElement(InputBase, _extends({\n    classes: _extends({}, classes, {\n      root: clsx(classes.root, !disableUnderline && classes.underline),\n      underline: null\n    }),\n    fullWidth: fullWidth,\n    inputComponent: inputComponent,\n    multiline: multiline,\n    ref: ref,\n    type: type\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Input.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The default `input` element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the input will not have an underline.\n   */\n  disableUnderline: PropTypes.bool,\n\n  /**\n   * End `InputAdornment` for this component.\n   */\n  endAdornment: PropTypes.node,\n\n  /**\n   * If `true`, the input will indicate an error. This is normally obtained via context from\n   * FormControl.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The component used for the `input` element.\n   * Either a string to use a HTML element or a component.\n   */\n  inputComponent: PropTypes.elementType,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense', 'none']),\n\n  /**\n   * If `true`, a textarea element will be rendered.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Start `InputAdornment` for this component.\n   */\n  startAdornment: PropTypes.node,\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any\n} : void 0;\nInput.muiName = 'Input';\nexport default withStyles(styles, {\n  name: 'MuiInput'\n})(Input);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Typography from '../Typography';\nimport withStyles from '../styles/withStyles';\nimport FormControlContext, { useFormControl } from '../FormControl/FormControlContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    height: '0.01em',\n    // Fix IE 11 flexbox alignment. To remove at some point.\n    maxHeight: '2em',\n    alignItems: 'center',\n    whiteSpace: 'nowrap'\n  },\n\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    '&$positionStart:not($hiddenLabel)': {\n      marginTop: 16\n    }\n  },\n\n  /* Styles applied to the root element if `position=\"start\"`. */\n  positionStart: {\n    marginRight: 8\n  },\n\n  /* Styles applied to the root element if `position=\"end\"`. */\n  positionEnd: {\n    marginLeft: 8\n  },\n\n  /* Styles applied to the root element if `disablePointerEvents=true`. */\n  disablePointerEvents: {\n    pointerEvents: 'none'\n  },\n\n  /* Styles applied if the adornment is used inside <FormControl hiddenLabel />. */\n  hiddenLabel: {},\n\n  /* Styles applied if the adornment is used inside <FormControl margin=\"dense\" />. */\n  marginDense: {}\n};\nvar InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disablePointer = props.disablePointerEvents,\n      disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      position = props.position,\n      variantProp = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disablePointerEvents\", \"disableTypography\", \"position\", \"variant\"]);\n\n  var muiFormControl = useFormControl() || {};\n  var variant = variantProp;\n\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('Material-UI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n\n  return /*#__PURE__*/React.createElement(FormControlContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, variant === 'filled' && classes.filled, {\n      'start': classes.positionStart,\n      'end': classes.positionEnd\n    }[position], muiFormControl.margin === 'dense' && classes.marginDense),\n    ref: ref\n  }, other), typeof children === 'string' && !disableTypography ? /*#__PURE__*/React.createElement(Typography, {\n    color: \"textSecondary\"\n  }, children) : children));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes = {\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the input on click.\n   */\n  disablePointerEvents: PropTypes.bool,\n\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  muiFormControl: PropTypes.object,\n\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['start', 'end']),\n\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputAdornment'\n})(InputAdornment);","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');","import * as React from \"react\";\nimport { useEditableInput, EditableInput } from \"@/components/app/Input\";\n\nconst Test: React.FC = () => {\n  const [title, setTitle] = useEditableInput(\"\");\n\n  return (\n    <div>\n      <EditableInput\n        variant=\"h4\"\n        value={title}\n        onChange={setTitle}\n        placeholder=\"请输入标题\"\n        rows={1}\n      />\n    </div>\n  );\n};\n\nexport default Test;\n"],"sourceRoot":""}