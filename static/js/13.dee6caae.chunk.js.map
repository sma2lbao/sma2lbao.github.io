{"version":3,"sources":["components/base/Editor/Controls.tsx","components/base/Editor/NormalEditor.tsx","components/base/Editor/index.tsx","views/Test/index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","paper","display","border","palette","divider","flexWrap","margin","spacing","grouped","borderRadius","shape","BLOCK_TYPES","label","style","value","icon","FormatQuote","FormatListBulleted","FormatListNumbered","Code","INLINE_STYLES","FormatBold","FormatItalic","FormatUnderlined","Controls","props","classes","React","inlines","setInlines","blocktype","setBlocktype","toggleBlockType","toggleInlineStyle","Paper","elevation","className","ToggleButtonGroup","onChange","event","newFormats","currentTarget","dataset","map","type","ToggleButton","data-style","key","Divider","flexItem","orientation","exclusive","newFormat","root","editor","minHeight","NormalEditor","ref","raw","onBlur","placeholder","EditorState","createWithContent","convertFromRaw","JSON","parse","createEmpty","editorState","setEditorState","getRawString","stringify","convertToRaw","getCurrentContent","blockType","RichUtils","inlineStyle","blockStyleFn","block","getType","customStyleMap","CODE","backgroundColor","fontFamily","fontSize","padding","handleKeyCommand","cmd","state","newState","keyBindingFn","e","getDefaultKeyBinding","spellCheck","Test"],"mappings":"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","file":"static/js/13.dee6caae.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  Divider,\n  Paper\n} from \"@material-ui/core\";\nimport { ToggleButtonGroup, ToggleButton } from \"@material-ui/lab\";\nimport {\n  FormatBold,\n  FormatItalic,\n  FormatUnderlined,\n  FormatQuote,\n  FormatListBulleted,\n  FormatListNumbered,\n  Code\n} from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      display: \"inline-flex\",\n      border: `1px solid ${theme.palette.divider}`,\n      flexWrap: \"wrap\"\n    },\n    divider: {\n      margin: theme.spacing(1, 0.5)\n    },\n    grouped: {\n      margin: theme.spacing(0.5),\n      border: \"none\",\n      \"&:not(:first-child)\": {\n        borderRadius: theme.shape.borderRadius\n      },\n      \"&:first-child\": {\n        borderRadius: theme.shape.borderRadius\n      }\n    }\n  })\n);\n\nconst BLOCK_TYPES = [\n  // { label: \"H1\", style: \"header-one\", value: \"h1\", icon: <FormatBold /> },\n  // { label: \"H2\", style: \"header-two\", value: \"h2\", icon: <FormatBold /> },\n  // { label: \"H3\", style: \"header-three\", value: \"h3\", icon: <FormatBold /> },\n  // { label: \"H4\", style: \"header-four\", value: \"h4\", icon: <FormatBold /> },\n  // { label: \"H5\", style: \"header-five\", value: \"h5\", icon: <FormatBold /> },\n  // { label: \"H6\", style: \"header-six\", value: \"h6\", icon: <FormatBold /> },\n  {\n    label: \"Blockquote\",\n    style: \"blockquote\",\n    value: \"blockquote\",\n    icon: <FormatQuote />\n  },\n  {\n    label: \"UL\",\n    style: \"unordered-list-item\",\n    value: \"ul\",\n    icon: <FormatListBulleted />\n  },\n  {\n    label: \"OL\",\n    style: \"ordered-list-item\",\n    value: \"ol\",\n    icon: <FormatListNumbered />\n  },\n  {\n    label: \"CodeBlock\",\n    style: \"code-block\",\n    value: \"codeblock\",\n    icon: <Code />\n  }\n];\n\nconst INLINE_STYLES = [\n  { label: \"Bold\", style: \"BOLD\", value: \"bold\", icon: <FormatBold /> },\n  { label: \"Italic\", style: \"ITALIC\", value: \"italic\", icon: <FormatItalic /> },\n  {\n    label: \"Underline\",\n    style: \"UNDERLINE\",\n    value: \"underline\",\n    icon: <FormatUnderlined />\n  }\n  // {\n  //   label: \"Monospace\",\n  //   style: \"CODE\",\n  //   value: \"code\",\n  //   icon: <FormatQuote />,\n  // },\n];\n\nexport const Controls = props => {\n  const classes = useStyles();\n  const [inlines, setInlines] = React.useState<string[]>([]);\n  const [blocktype, setBlocktype] = React.useState<string>();\n  const { toggleBlockType, toggleInlineStyle } = props;\n  // const selection = editorState.getSelection();\n  // const blockType = editorState\n  //   .getCurrentContent()\n  //   .getBlockForKey(selection.getStartKey())\n  //   .getType();\n  // const currentStyle = editorState.getCurrentInlineStyle();\n\n  const handleInlineFormat = (\n    event: React.MouseEvent<HTMLElement>,\n    newFormats: string[]\n  ) => {\n    const { style } = event.currentTarget.dataset;\n    if (style) {\n      toggleInlineStyle(style);\n    }\n    setInlines(newFormats);\n  };\n\n  const handleBlocktypeFormat = (\n    event: React.MouseEvent<HTMLElement>,\n    newFormat\n  ) => {\n    const { style } = event.currentTarget.dataset;\n    if (style) {\n      toggleBlockType(style);\n    }\n    setBlocktype(newFormat);\n  };\n\n  return (\n    <Paper elevation={0} className={classes.paper}>\n      <ToggleButtonGroup\n        value={inlines}\n        onChange={handleInlineFormat}\n        classes={{ grouped: classes.grouped }}\n      >\n        {INLINE_STYLES.map(type => (\n          <ToggleButton\n            data-style={type.style}\n            key={type.value}\n            value={type.value}\n          >\n            {type.icon}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n      <Divider flexItem orientation=\"vertical\" className={classes.divider} />\n      <ToggleButtonGroup\n        value={blocktype}\n        exclusive\n        onChange={handleBlocktypeFormat}\n        classes={{ grouped: classes.grouped }}\n      >\n        {BLOCK_TYPES.map(type => (\n          <ToggleButton\n            data-style={type.style}\n            key={type.value}\n            value={type.value}\n          >\n            {type.icon}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </Paper>\n  );\n};\n","import * as React from \"react\";\nimport {\n  Editor,\n  EditorState,\n  RichUtils,\n  getDefaultKeyBinding,\n  convertFromRaw,\n  convertToRaw\n} from \"draft-js\";\nimport \"draft-js/dist/Draft.css\";\nimport { BaseEditorProps, BaseEditorHandles } from \"./editor\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core\";\nimport { Controls } from \"./Controls\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      // minHeight: 420,\n    },\n    editor: {\n      minHeight: 220,\n      border: `1px solid ${theme.palette.divider}`\n    }\n  })\n);\n\nexport const NormalEditor = React.forwardRef<\n  BaseEditorHandles,\n  BaseEditorProps\n>((props, ref) => {\n  const classes = useStyles();\n  const { raw, onBlur, placeholder } = props;\n  const [editorState, setEditorState] = React.useState(() =>\n    raw\n      ? EditorState.createWithContent(convertFromRaw(JSON.parse(raw)))\n      : EditorState.createEmpty()\n  );\n\n  React.useImperativeHandle(ref, () => ({\n    getRawString: () => {\n      return JSON.stringify(convertToRaw(editorState.getCurrentContent()));\n    }\n  }));\n\n  const handleKeyCommand = (cmd, state) => {\n    const newState = RichUtils.handleKeyCommand(state, cmd);\n    if (newState) {\n      setEditorState(newState);\n      return \"handled\";\n    }\n    return \"not-handled\";\n  };\n\n  const mapKeyToEditorCommand = e => {\n    // if (e.keyCode === 9 /* TAB */) {\n    //   const newEditorState = RichUtils.onTab(e, editorState, 4 /* maxDepth */);\n    //   if (newEditorState !== editorState) {\n    //     setEditorState(newEditorState);\n    //   }\n    //   return null;\n    // }\n    return getDefaultKeyBinding(e);\n  };\n\n  const toggleBlockType = blockType => {\n    setEditorState(RichUtils.toggleBlockType(editorState, blockType));\n  };\n\n  const toggleInlineStyle = inlineStyle => {\n    setEditorState(RichUtils.toggleInlineStyle(editorState, inlineStyle));\n  };\n\n  // Custom overrides for \"code\" style.\n  const styleMap = {\n    CODE: {\n      backgroundColor: \"rgba(0, 0, 0, 0.05)\",\n      fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n      fontSize: 16,\n      padding: 2\n    }\n  };\n\n  function getBlockStyle(block) {\n    switch (block.getType()) {\n      case \"blockquote\":\n        return \"RichEditor-blockquote\";\n      default:\n        return \"\";\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Controls\n        editorState={editorState}\n        toggleBlockType={toggleBlockType}\n        toggleInlineStyle={toggleInlineStyle}\n      />\n      <div className={classes.editor}>\n        <Editor\n          blockStyleFn={getBlockStyle}\n          customStyleMap={styleMap}\n          editorState={editorState}\n          handleKeyCommand={handleKeyCommand}\n          keyBindingFn={mapKeyToEditorCommand}\n          onChange={setEditorState}\n          onBlur={onBlur}\n          placeholder={placeholder}\n          spellCheck={true}\n        />\n      </div>\n    </div>\n  );\n});\n","import { NormalEditor } from \"./NormalEditor\";\n\nexport default NormalEditor;\nexport const Editor = NormalEditor;\nexport * from \"./NormalEditor\";\n","import * as React from \"react\";\n// import { FileUpload } from \"@/components/app/FileUpload\";\nimport NormalEditor from \"@/components/base/Editor\";\n// import { withTool, MediaNormal } from \"@/components/app/Media\";\n// import Confirm from \"@/components/base/Confirm\";\n\n// const ToolMediaNormal = withTool(MediaNormal);\n\nconst Test: React.FC = () => {\n  // const handleConfirm = async () => {\n  //   const isConfirm = await Confirm.dialog({\n  //     title: \"标题\",\n  //     content: \"内容\",\n  //   });\n  //   console.log(isConfirm);\n  // };\n\n  return (\n    <div>\n      <div>\n        {/* <div onClick={handleConfirm}>confirm</div> */}\n        {/* <FileUpload /> */}\n        <NormalEditor />\n      </div>\n    </div>\n  );\n};\n\nexport default Test;\n"],"sourceRoot":""}