{"version":3,"sources":["components/base/Editor/NormalEditor.tsx","components/base/Editor/index.tsx","views/Test/index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","editor","minHeight","StyleButton","props","className","active","onMouseDown","e","preventDefault","onToggle","style","label","BLOCK_TYPES","BlockStyleControls","editorState","selection","getSelection","blockType","getCurrentContent","getBlockForKey","getStartKey","getType","map","type","key","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","NormalEditor","React","ref","classes","raw","onBlur","placeholder","EditorState","createWithContent","convertFromRaw","JSON","parse","createEmpty","setEditorState","getRawString","stringify","convertToRaw","RichUtils","toggleBlockType","inlineStyle","toggleInlineStyle","blockStyleFn","block","customStyleMap","CODE","backgroundColor","fontFamily","fontSize","padding","handleKeyCommand","cmd","state","newState","keyBindingFn","keyCode","newEditorState","onTab","getDefaultKeyBinding","onChange","spellCheck","Test"],"mappings":"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","file":"static/js/13.0cd4bf64.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {\n  Editor,\n  EditorState,\n  RichUtils,\n  getDefaultKeyBinding,\n  convertFromRaw,\n  convertToRaw\n} from \"draft-js\";\nimport \"draft-js/dist/Draft.css\";\nimport { BaseEditorProps, BaseEditorHandles } from \"./editor\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      // minHeight: 420,\n    },\n    editor: {\n      minHeight: 220\n    }\n  })\n);\n\nconst StyleButton = props => {\n  let className = \"RichEditor-styleButton\";\n  if (props.active) {\n    className += \" RichEditor-activeButton\";\n  }\n  const onToggle = e => {\n    e.preventDefault();\n    props.onToggle(props.style);\n  };\n\n  return (\n    <span className={className} onMouseDown={onToggle}>\n      {props.label}\n    </span>\n  );\n};\n\nconst BLOCK_TYPES = [\n  { label: \"H1\", style: \"header-one\" },\n  { label: \"H2\", style: \"header-two\" },\n  { label: \"H3\", style: \"header-three\" },\n  { label: \"H4\", style: \"header-four\" },\n  { label: \"H5\", style: \"header-five\" },\n  { label: \"H6\", style: \"header-six\" },\n  { label: \"Blockquote\", style: \"blockquote\" },\n  { label: \"UL\", style: \"unordered-list-item\" },\n  { label: \"OL\", style: \"ordered-list-item\" },\n  { label: \"Code Block\", style: \"code-block\" }\n];\n\nconst BlockStyleControls = props => {\n  const { editorState } = props;\n  const selection = editorState.getSelection();\n  const blockType = editorState\n    .getCurrentContent()\n    .getBlockForKey(selection.getStartKey())\n    .getType();\n\n  return (\n    <div className=\"RichEditor-controls\">\n      {BLOCK_TYPES.map(type => (\n        <StyleButton\n          key={type.label}\n          active={type.style === blockType}\n          label={type.label}\n          onToggle={props.onToggle}\n          style={type.style}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst INLINE_STYLES = [\n  { label: \"Bold\", style: \"BOLD\" },\n  { label: \"Italic\", style: \"ITALIC\" },\n  { label: \"Underline\", style: \"UNDERLINE\" },\n  { label: \"Monospace\", style: \"CODE\" }\n];\n\nconst InlineStyleControls = props => {\n  const currentStyle = props.editorState.getCurrentInlineStyle();\n\n  return (\n    <div className=\"RichEditor-controls\">\n      {INLINE_STYLES.map(type => (\n        <StyleButton\n          key={type.label}\n          active={currentStyle.has(type.style)}\n          label={type.label}\n          onToggle={props.onToggle}\n          style={type.style}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport const NormalEditor = React.forwardRef<\n  BaseEditorHandles,\n  BaseEditorProps\n>((props, ref) => {\n  const classes = useStyles();\n  const { raw, onBlur, placeholder } = props;\n  const [editorState, setEditorState] = React.useState(() =>\n    raw\n      ? EditorState.createWithContent(convertFromRaw(JSON.parse(raw)))\n      : EditorState.createEmpty()\n  );\n\n  React.useImperativeHandle(ref, () => ({\n    getRawString: () => {\n      return JSON.stringify(convertToRaw(editorState.getCurrentContent()));\n    }\n  }));\n\n  const handleKeyCommand = (cmd, state) => {\n    const newState = RichUtils.handleKeyCommand(state, cmd);\n    if (newState) {\n      setEditorState(newState);\n      return \"handled\";\n    }\n    return \"not-handled\";\n  };\n\n  const mapKeyToEditorCommand = e => {\n    if (e.keyCode === 9 /* TAB */) {\n      const newEditorState = RichUtils.onTab(e, editorState, 4 /* maxDepth */);\n      if (newEditorState !== editorState) {\n        setEditorState(newEditorState);\n      }\n      return null;\n    }\n    return getDefaultKeyBinding(e);\n  };\n\n  const toggleBlockType = blockType => {\n    setEditorState(RichUtils.toggleBlockType(editorState, blockType));\n  };\n\n  const toggleInlineStyle = inlineStyle => {\n    setEditorState(RichUtils.toggleInlineStyle(editorState, inlineStyle));\n  };\n\n  // Custom overrides for \"code\" style.\n  const styleMap = {\n    CODE: {\n      backgroundColor: \"rgba(0, 0, 0, 0.05)\",\n      fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n      fontSize: 16,\n      padding: 2\n    }\n  };\n\n  function getBlockStyle(block) {\n    switch (block.getType()) {\n      case \"blockquote\":\n        return \"RichEditor-blockquote\";\n      default:\n        return \"\";\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <BlockStyleControls\n        editorState={editorState}\n        onToggle={toggleBlockType}\n      />\n      <InlineStyleControls\n        editorState={editorState}\n        onToggle={toggleInlineStyle}\n      />\n      <div className={classes.editor}>\n        <Editor\n          blockStyleFn={getBlockStyle}\n          customStyleMap={styleMap}\n          editorState={editorState}\n          handleKeyCommand={handleKeyCommand}\n          keyBindingFn={mapKeyToEditorCommand}\n          onChange={setEditorState}\n          onBlur={onBlur}\n          placeholder={placeholder}\n          spellCheck={true}\n        />\n      </div>\n    </div>\n  );\n});\n","import { NormalEditor } from \"./NormalEditor\";\n\nexport default NormalEditor;\nexport const Editor = NormalEditor;\nexport * from \"./NormalEditor\";\n","import * as React from \"react\";\n// import { FileUpload } from \"@/components/app/FileUpload\";\nimport NormalEditor from \"@/components/base/Editor\";\n// import { withTool, MediaNormal } from \"@/components/app/Media\";\n// import Confirm from \"@/components/base/Confirm\";\n\n// const ToolMediaNormal = withTool(MediaNormal);\n\nconst Test: React.FC = () => {\n  // const handleConfirm = async () => {\n  //   const isConfirm = await Confirm.dialog({\n  //     title: \"标题\",\n  //     content: \"内容\",\n  //   });\n  //   console.log(isConfirm);\n  // };\n\n  return (\n    <div>\n      <div>\n        {/* <div onClick={handleConfirm}>confirm</div> */}\n        {/* <FileUpload /> */}\n        <NormalEditor />\n      </div>\n    </div>\n  );\n};\n\nexport default Test;\n"],"sourceRoot":""}