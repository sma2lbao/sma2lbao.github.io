{"version":3,"sources":["components/app/Input/input.d.ts","components/base/Editor/Controls.tsx","components/base/Editor/NormalEditor.tsx","views/movies/MovieUpload/modules/EditAbout/index.tsx","components/app/Input/useEditableInput.tsx","components/app/Input/EditableInput.tsx","views/movies/MovieUpload/modules/EditCast/index.tsx","components/app/FileUpload/FileUpload.tsx","views/movies/MovieUpload/modules/EditTop/index.tsx","views/movies/MovieUpload/modules/EditMediumInfo/index.tsx","views/movies/MovieUpload/modules/EditMain/index.tsx","views/movies/MovieUpload/modules/index.tsx","views/Test/index.tsx"],"names":["InputStatus","useStyles","makeStyles","theme","createStyles","paper","display","border","palette","divider","flexWrap","margin","spacing","grouped","borderRadius","shape","BLOCK_TYPES","label","style","value","icon","FormatQuote","FormatListBulleted","FormatListNumbered","Code","INLINE_STYLES","FormatBold","FormatItalic","FormatUnderlined","Controls","props","classes","React","inlines","setInlines","blocktype","setBlocktype","toggleBlockType","toggleInlineStyle","Paper","elevation","className","ToggleButtonGroup","onChange","event","newFormats","currentTarget","dataset","map","type","ToggleButton","data-style","key","Divider","flexItem","orientation","exclusive","newFormat","root","editor","minHeight","NormalEditor","ref","raw","onBlur","placeholder","EditorState","createWithContent","convertFromRaw","JSON","parse","createEmpty","editorState","setEditorState","getRawString","stringify","convertToRaw","getCurrentContent","blockType","RichUtils","inlineStyle","blockStyleFn","block","getType","customStyleMap","CODE","backgroundColor","fontFamily","fontSize","padding","handleKeyCommand","cmd","state","newState","keyBindingFn","e","getDefaultKeyBinding","spellCheck","EditAbout","aboutRaw","setAboutRaw","about","editorRef","rawString","current","useEditableInput","initValue","setValue","target","input","borderColor","body2","typography","body1","caption","button","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","overline","inherit","normalRoot","position","toolIcon","top","cursor","EditableInput","variant","rest","NORMAL","status","setStatus","Input","autoFocus","fullWidth","multiline","startAdornment","InputAdornment","IconButton","size","onClick","EDITING","Edit","readOnly","disableUnderline","background","subheaderWrap","justifyContent","alignItems","EditCast","credits","setCredits","handleChange","idx","Box","List","subheader","ListSubheader","Typography","avatar","name","description","tags","AddCircle","length","item","ListItem","ListItemAvatar","Avatar","src","inputProps","rowsMax","ListItemSecondaryAction","splice","handleDelete","Delete","Placeholder","title","flexDirection","width","height","color","text","secondary","flex","custom","base","small","FileUpload","onComplete","onError","children","component","inputRef","useUploadFileOssMutation","onCompleted","data","upload_file_oss","error","message","loading","Tag","role","click","accept","validity","file","files","valid","variables","CloudUpload","defaultProps","AutoPlaySwipeableViews","autoPlay","SwipeableViews","aider","left","bottom","aiderContent","maxHeight","backdropFilter","overflow","main","right","transform","mainContent","poster","posterTool","visibility","EditTop","activeStep","setActiveStep","setTitle","sub_title","setSubTitle","setDescription","posters","setPosters","cover","setCover","includes","handleRemovePoster","window","confirm","onChangeIndex","step","index","image","Image","aspectRatio","DEFULAT_MOVIE_COVER","GridList","cellHeight","cols","GridListTile","alt","Tooltip","TransitionComponent","Zoom","placement","arrow","Switch","checked","handleChangeCover","data-idx","imageUrl","mt","disabled","PlayCircleOutline","body","content","borderRight","sourceWrap","toolbarWrap","EditMediumInfo","onSave","onCancel","open","setOpen","url","setUrl","setName","alias_name","setAliasName","handleCancle","Dialog","fullScreen","onClose","AppBar","Toolbar","Button","sourceUrl","sticky","box","borderTop","EditMain","forwardRef","useState","openMedium","setOpenMedium","mediums","setMediums","useImperativeHandle","gutterBottom","Media","medium","Test"],"mappings":"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","file":"static/js/14.75b1702b.chunk.js","sourcesContent":["import { InputProps } from \"@material-ui/core\";\n\nconst variantProps = [\n  \"body1\",\n  \"body2\",\n  \"button\",\n  \"caption\",\n  \"h1\",\n  \"h2\",\n  \"h3\",\n  \"h4\",\n  \"h5\",\n  \"h6\",\n  \"inherit\",\n  \"overline\",\n  \"subtitle1\",\n  \"subtitle2\"\n] as const;\n\nexport interface BaseInputAttributes {\n  placeholder?: string;\n\n  variant?: typeof variantProps[number];\n}\n\nexport interface BaseInputProps extends InputProps, BaseInputAttributes {\n  value: any;\n\n  onChange?(e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>): void;\n}\n\nexport enum InputStatus {\n  NORMAL = 0, // 默认状态\n\n  EDITING = 1 // 编辑中\n}\n","import * as React from \"react\";\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  Divider,\n  Paper\n} from \"@material-ui/core\";\nimport { ToggleButtonGroup, ToggleButton } from \"@material-ui/lab\";\nimport {\n  FormatBold,\n  FormatItalic,\n  FormatUnderlined,\n  FormatQuote,\n  FormatListBulleted,\n  FormatListNumbered,\n  Code\n} from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      display: \"inline-flex\",\n      border: `1px solid ${theme.palette.divider}`,\n      flexWrap: \"wrap\"\n    },\n    divider: {\n      margin: theme.spacing(1, 0.5)\n    },\n    grouped: {\n      margin: theme.spacing(0.5),\n      border: \"none\",\n      \"&:not(:first-child)\": {\n        borderRadius: theme.shape.borderRadius\n      },\n      \"&:first-child\": {\n        borderRadius: theme.shape.borderRadius\n      }\n    }\n  })\n);\n\nconst BLOCK_TYPES = [\n  // { label: \"H1\", style: \"header-one\", value: \"h1\", icon: <FormatBold /> },\n  // { label: \"H2\", style: \"header-two\", value: \"h2\", icon: <FormatBold /> },\n  // { label: \"H3\", style: \"header-three\", value: \"h3\", icon: <FormatBold /> },\n  // { label: \"H4\", style: \"header-four\", value: \"h4\", icon: <FormatBold /> },\n  // { label: \"H5\", style: \"header-five\", value: \"h5\", icon: <FormatBold /> },\n  // { label: \"H6\", style: \"header-six\", value: \"h6\", icon: <FormatBold /> },\n  {\n    label: \"Blockquote\",\n    style: \"blockquote\",\n    value: \"blockquote\",\n    icon: <FormatQuote />\n  },\n  {\n    label: \"UL\",\n    style: \"unordered-list-item\",\n    value: \"ul\",\n    icon: <FormatListBulleted />\n  },\n  {\n    label: \"OL\",\n    style: \"ordered-list-item\",\n    value: \"ol\",\n    icon: <FormatListNumbered />\n  },\n  {\n    label: \"CodeBlock\",\n    style: \"code-block\",\n    value: \"codeblock\",\n    icon: <Code />\n  }\n];\n\nconst INLINE_STYLES = [\n  { label: \"Bold\", style: \"BOLD\", value: \"bold\", icon: <FormatBold /> },\n  { label: \"Italic\", style: \"ITALIC\", value: \"italic\", icon: <FormatItalic /> },\n  {\n    label: \"Underline\",\n    style: \"UNDERLINE\",\n    value: \"underline\",\n    icon: <FormatUnderlined />\n  }\n  // {\n  //   label: \"Monospace\",\n  //   style: \"CODE\",\n  //   value: \"code\",\n  //   icon: <FormatQuote />,\n  // },\n];\n\nexport const Controls = props => {\n  const classes = useStyles();\n  const [inlines, setInlines] = React.useState<string[]>([]);\n  const [blocktype, setBlocktype] = React.useState<string>();\n  const { toggleBlockType, toggleInlineStyle } = props;\n  // const selection = editorState.getSelection();\n  // const blockType = editorState\n  //   .getCurrentContent()\n  //   .getBlockForKey(selection.getStartKey())\n  //   .getType();\n  // const currentStyle = editorState.getCurrentInlineStyle();\n\n  const handleInlineFormat = (\n    event: React.MouseEvent<HTMLElement>,\n    newFormats: string[]\n  ) => {\n    const { style } = event.currentTarget.dataset;\n    if (style) {\n      toggleInlineStyle(style);\n    }\n    setInlines(newFormats);\n  };\n\n  const handleBlocktypeFormat = (\n    event: React.MouseEvent<HTMLElement>,\n    newFormat\n  ) => {\n    const { style } = event.currentTarget.dataset;\n    if (style) {\n      toggleBlockType(style);\n    }\n    setBlocktype(newFormat);\n  };\n\n  return (\n    <Paper elevation={0} className={classes.paper}>\n      <ToggleButtonGroup\n        value={inlines}\n        onChange={handleInlineFormat}\n        classes={{ grouped: classes.grouped }}\n      >\n        {INLINE_STYLES.map(type => (\n          <ToggleButton\n            data-style={type.style}\n            key={type.value}\n            value={type.value}\n          >\n            {type.icon}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n      <Divider flexItem orientation=\"vertical\" className={classes.divider} />\n      <ToggleButtonGroup\n        value={blocktype}\n        exclusive\n        onChange={handleBlocktypeFormat}\n        classes={{ grouped: classes.grouped }}\n      >\n        {BLOCK_TYPES.map(type => (\n          <ToggleButton\n            data-style={type.style}\n            key={type.value}\n            value={type.value}\n          >\n            {type.icon}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </Paper>\n  );\n};\n","import * as React from \"react\";\nimport {\n  Editor,\n  EditorState,\n  RichUtils,\n  getDefaultKeyBinding,\n  convertFromRaw,\n  convertToRaw\n} from \"draft-js\";\nimport \"draft-js/dist/Draft.css\";\nimport { BaseEditorProps, BaseEditorHandles } from \"./editor\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core\";\nimport { Controls } from \"./Controls\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      // minHeight: 420,\n    },\n    editor: {\n      minHeight: 220,\n      border: `1px solid ${theme.palette.divider}`\n    }\n  })\n);\n\nexport const NormalEditor = React.forwardRef<\n  BaseEditorHandles,\n  BaseEditorProps\n>((props, ref) => {\n  const classes = useStyles();\n  const { raw, onBlur, placeholder } = props;\n  const [editorState, setEditorState] = React.useState(() =>\n    raw\n      ? EditorState.createWithContent(convertFromRaw(JSON.parse(raw)))\n      : EditorState.createEmpty()\n  );\n\n  React.useImperativeHandle(ref, () => ({\n    getRawString: () => {\n      return JSON.stringify(convertToRaw(editorState.getCurrentContent()));\n    }\n  }));\n\n  const handleKeyCommand = (cmd, state) => {\n    const newState = RichUtils.handleKeyCommand(state, cmd);\n    if (newState) {\n      setEditorState(newState);\n      return \"handled\";\n    }\n    return \"not-handled\";\n  };\n\n  const mapKeyToEditorCommand = e => {\n    // if (e.keyCode === 9 /* TAB */) {\n    //   const newEditorState = RichUtils.onTab(e, editorState, 4 /* maxDepth */);\n    //   if (newEditorState !== editorState) {\n    //     setEditorState(newEditorState);\n    //   }\n    //   return null;\n    // }\n    return getDefaultKeyBinding(e);\n  };\n\n  const toggleBlockType = blockType => {\n    setEditorState(RichUtils.toggleBlockType(editorState, blockType));\n  };\n\n  const toggleInlineStyle = inlineStyle => {\n    setEditorState(RichUtils.toggleInlineStyle(editorState, inlineStyle));\n  };\n\n  // Custom overrides for \"code\" style.\n  const styleMap = {\n    CODE: {\n      backgroundColor: \"rgba(0, 0, 0, 0.05)\",\n      fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n      fontSize: 16,\n      padding: 2\n    }\n  };\n\n  function getBlockStyle(block) {\n    switch (block.getType()) {\n      case \"blockquote\":\n        return \"RichEditor-blockquote\";\n      default:\n        return \"\";\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Controls\n        editorState={editorState}\n        toggleBlockType={toggleBlockType}\n        toggleInlineStyle={toggleInlineStyle}\n      />\n      <div className={classes.editor}>\n        <Editor\n          blockStyleFn={getBlockStyle}\n          customStyleMap={styleMap}\n          editorState={editorState}\n          handleKeyCommand={handleKeyCommand}\n          keyBindingFn={mapKeyToEditorCommand}\n          onChange={setEditorState}\n          onBlur={onBlur}\n          placeholder={placeholder}\n          spellCheck={true}\n        />\n      </div>\n    </div>\n  );\n});\n","import * as React from \"react\";\nimport { NormalEditor } from \"@/components/base/Editor\";\nimport { EditorHandles } from \"@/components/base/Editor/editor\";\n\nexport interface EditAboutHandles {\n  about?: string;\n}\n\nexport const EditAbout = React.forwardRef<EditAboutHandles, unknown>(\n  (props, ref) => {\n    const [aboutRaw, setAboutRaw] = React.useState(\"\");\n\n    React.useImperativeHandle(ref, () => ({\n      about: aboutRaw\n    }));\n    const editorRef = React.createRef<EditorHandles>();\n\n    const handleBlur = () => {\n      const rawString = editorRef.current?.getRawString();\n      setAboutRaw(rawString);\n    };\n\n    return (\n      <div>\n        <NormalEditor ref={editorRef} onBlur={handleBlur} />\n      </div>\n    );\n  }\n);\n\nexport default EditAbout;\n","import * as React from \"react\";\n\nexport const useEditableInput = (initValue?: any): [any, any] => {\n  const [value, setValue] = React.useState(initValue);\n\n  const onChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setValue(e.target.value);\n  };\n\n  return [value, onChange];\n};\n","import * as React from \"react\";\nimport {\n  Input,\n  makeStyles,\n  Theme,\n  createStyles,\n  InputAdornment,\n  IconButton\n} from \"@material-ui/core\";\nimport { BaseInputProps, InputStatus } from \"./input.d\";\nimport { Edit } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme: Theme) => {\n  return createStyles({\n    root: {},\n    input: {\n      borderColor: \"transparent\"\n    },\n    /* Styles applied to the root element if `variant=\"body2\"`. */\n    body2: theme.typography.body2,\n    /* Styles applied to the root element if `variant=\"body1\"`. */\n    body1: theme.typography.body1,\n    /* Styles applied to the root element if `variant=\"caption\"`. */\n    caption: theme.typography.caption,\n    /* Styles applied to the root element if `variant=\"button\"`. */\n    button: theme.typography.button,\n    /* Styles applied to the root element if `variant=\"h1\"`. */\n    h1: theme.typography.h1,\n    /* Styles applied to the root element if `variant=\"h2\"`. */\n    h2: theme.typography.h2,\n    /* Styles applied to the root element if `variant=\"h3\"`. */\n    h3: theme.typography.h3,\n    /* Styles applied to the root element if `variant=\"h4\"`. */\n    h4: theme.typography.h4,\n    /* Styles applied to the root element if `variant=\"h5\"`. */\n    h5: theme.typography.h5,\n    /* Styles applied to the root element if `variant=\"h6\"`. */\n    h6: theme.typography.h6,\n    /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n    subtitle1: theme.typography.subtitle1,\n    /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n    subtitle2: theme.typography.subtitle2,\n    /* Styles applied to the root element if `variant=\"overline\"`. */\n    overline: theme.typography.overline,\n    /* Styles applied to the root element if `variant=\"inherit\"`. */\n    inherit: {},\n\n    normalRoot: {\n      position: \"relative\"\n    },\n\n    toolIcon: {\n      position: \"relative\",\n      top: theme.spacing(-1),\n      cursor: \"pointer\"\n    }\n  });\n});\n\nexport const EditableInput: React.FC<BaseInputProps> = props => {\n  const { value, onChange, placeholder, variant = \"body1\", ...rest } = props;\n  const classes = useStyles();\n  const [status, setStatus] = React.useState<InputStatus>(InputStatus.NORMAL);\n\n  return (\n    <Input\n      classes={{\n        root: classes.root\n      }}\n      autoFocus\n      fullWidth\n      multiline\n      className={classes[variant]}\n      value={value}\n      onChange={onChange}\n      placeholder={placeholder}\n      {...rest}\n      startAdornment={\n        status === InputStatus.NORMAL ? (\n          <InputAdornment position=\"start\">\n            <IconButton\n              size=\"small\"\n              onClick={() => setStatus(InputStatus.EDITING)}\n            >\n              <Edit fontSize=\"small\" />\n            </IconButton>\n          </InputAdornment>\n        ) : null\n      }\n      readOnly={status === InputStatus.NORMAL}\n      disableUnderline={status === InputStatus.NORMAL}\n      onBlur={() => setStatus(InputStatus.NORMAL)}\n    />\n  );\n};\n","import * as React from \"react\";\nimport {\n  List,\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  ListItemSecondaryAction,\n  IconButton,\n  Box,\n  ListSubheader,\n  Typography\n} from \"@material-ui/core\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport { AddCircle, Delete } from \"@material-ui/icons\";\nimport { Placeholder } from \"@/components/base/Placeholder\";\nimport { Character } from \"@/schema\";\nimport { EditableInput } from \"@/components/app/Input\";\n\nexport interface CharacterEdit extends Character {\n  // status:\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper\n    },\n    subheaderWrap: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\"\n    }\n  })\n);\n\nexport interface EditCastHandles {\n  credits: CharacterEdit[];\n}\n\nexport const EditCast = React.forwardRef<EditCastHandles, unknown>(\n  (props, ref) => {\n    const classes = useStyles();\n    const [credits, setCredits] = React.useState<CharacterEdit[]>([]);\n\n    React.useImperativeHandle(ref, () => ({\n      credits\n    }));\n\n    const handleAddCredit = () => {\n      setCredits([\n        ...credits,\n        {\n          avatar: \"\",\n          name: \"\",\n          description: \"\",\n          tags: []\n        }\n      ]);\n    };\n\n    const handleChange = (\n      e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n    ) => {\n      const { dataset, value } = e.target;\n      if (dataset.idx && dataset.key) {\n        const cur = credits[dataset.idx];\n        cur[dataset.key] = value;\n        setCredits([...credits]);\n      }\n    };\n\n    const handleDelete = (idx: number) => {\n      credits.splice(idx, 1);\n      setCredits([...credits]);\n    };\n\n    return (\n      <Box className={classes.root}>\n        <List\n          subheader={\n            <ListSubheader className={classes.subheaderWrap}>\n              <Typography>演职表</Typography>\n              <IconButton onClick={handleAddCredit} size=\"small\">\n                <AddCircle fontSize=\"small\" />\n              </IconButton>\n            </ListSubheader>\n          }\n        >\n          {credits.length ? (\n            <>\n              {credits.map((item, idx) => {\n                return (\n                  <ListItem key={idx}>\n                    <ListItemAvatar>\n                      <Avatar src={item.avatar}></Avatar>\n                    </ListItemAvatar>\n                    <div>\n                      <EditableInput\n                        inputProps={{ \"data-idx\": idx, \"data-key\": \"name\" }}\n                        value={item.name}\n                        onChange={handleChange}\n                        placeholder=\"请输入名字\"\n                        rowsMax={1}\n                      />\n\n                      <EditableInput\n                        inputProps={{\n                          \"data-idx\": idx,\n                          \"data-key\": \"description\"\n                        }}\n                        value={item.description}\n                        onChange={handleChange}\n                        placeholder=\"请输入描述\"\n                        rowsMax={1}\n                      />\n                    </div>\n                    <ListItemSecondaryAction>\n                      <IconButton onClick={() => handleDelete(idx)}>\n                        <Delete />\n                      </IconButton>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                );\n              })}\n            </>\n          ) : (\n            <div>\n              <Placeholder title=\"Please add cast.\" />\n            </div>\n          )}\n        </List>\n      </Box>\n    );\n  }\n);\n\nexport default EditCast;\n","import * as React from \"react\";\nimport { useUploadFileOssMutation } from \"@/schema\";\nimport { BaseFileUploadProps } from \"./file-upload\";\nimport {\n  Box,\n  makeStyles,\n  Theme,\n  createStyles,\n  Typography\n} from \"@material-ui/core\";\nimport { CloudUpload } from \"@material-ui/icons\";\nimport { IPlaceholderProps } from \"@/components/base/Placeholder/placeholder\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"inline-flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      width: (props: IPlaceholderProps) => {\n        return props.width ?? \"100%\";\n      },\n      height: (props: IPlaceholderProps) => {\n        return props.height ?? \"100%\";\n      },\n      color: theme.palette.text.secondary,\n      flex: 1\n    },\n    icon: theme.custom.base.icon.small\n  })\n);\n\nexport const FileUpload: React.FC<BaseFileUploadProps> = props => {\n  const { onComplete, onError, children, component, custom, title } = props;\n  const classes = useStyles(props);\n\n  const inputRef = React.createRef<HTMLInputElement>();\n\n  const [upload_file_oss, { loading }] = useUploadFileOssMutation({\n    onCompleted(data) {\n      onComplete && onComplete(data.upload_file_oss);\n    },\n    onError(error) {\n      onError && onError(error.message);\n    }\n  });\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      validity,\n      files: [file]\n    } = e.currentTarget;\n    if (validity.valid) {\n      upload_file_oss({ variables: { file } });\n    }\n  };\n\n  const handleClick = () => {\n    if (!loading) {\n      inputRef.current?.click();\n    }\n  };\n\n  const Tag = component || \"div\";\n\n  return (\n    <Tag role=\"button\" onClick={handleClick}>\n      <input\n        ref={inputRef}\n        style={{ display: \"none\" }}\n        type=\"file\"\n        accept=\"*\"\n        onChange={handleChange}\n      />\n      {custom ? (\n        { children }\n      ) : (\n        <Box className={classes.root}>\n          <div>\n            <CloudUpload className={classes.icon} />\n            {/* <CircularProgress className={classes.icon} /> */}\n          </div>\n          <Typography variant=\"h6\">{loading ? \"上传中...\" : title}</Typography>\n        </Box>\n      )}\n    </Tag>\n  );\n};\n\nFileUpload.defaultProps = {\n  custom: false,\n  title: \"点击上传\"\n};\n","import * as React from \"react\";\nimport { Image } from \"@/components/base/Image\";\nimport { DEFULAT_MOVIE_COVER } from \"@/common/constants/default.constant\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport {\n  Box,\n  GridList,\n  GridListTile,\n  IconButton,\n  Switch,\n  Tooltip,\n  Zoom\n} from \"@material-ui/core\";\n\nimport { useEditableInput, EditableInput } from \"@/components/app/Input\";\nimport { FileUpload } from \"@/components/app/FileUpload\";\nimport { PlayCircleOutline, Delete } from \"@material-ui/icons\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport { autoPlay } from \"react-swipeable-views-utils\";\n\nconst AutoPlaySwipeableViews = autoPlay(SwipeableViews);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      position: \"relative\",\n      width: \"100%\"\n    },\n    aider: {\n      position: \"absolute\",\n      left: 0,\n      top: 0,\n      bottom: 0,\n      width: \"45%\",\n      padding: theme.spacing(8)\n    },\n    aiderContent: {\n      width: \"50%\",\n      padding: theme.spacing(1),\n      borderRadius: theme.shape.borderRadius,\n      maxHeight: \"100%\",\n      background: \"rgba(0, 0, 0, .1)\",\n      backdropFilter: \"blur(8px)\",\n      overflow: \"auto\"\n    },\n    main: {\n      position: \"absolute\",\n      top: \"50%\",\n      right: 0,\n      width: \"50%\",\n      padding: theme.spacing(0, 8),\n      transform: \"translate(0, -50%)\",\n      color: \"#fff\",\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    mainContent: {\n      background: \"rgba(0, 0, 0, .1)\",\n      backdropFilter: \"blur(8px)\",\n      padding: theme.spacing(4),\n      borderRadius: theme.shape.borderRadius\n    },\n    poster: {\n      position: \"relative\"\n    },\n    posterTool: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      visibility: \"hidden\",\n      position: \"absolute\",\n      padding: theme.spacing(1),\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      color: \"#fff\",\n      \"$poster:hover &\": {\n        visibility: \"initial\"\n      }\n    }\n  })\n);\n\nexport interface EditTopHandles {\n  title: string;\n\n  sub_title?: string;\n\n  description?: string;\n\n  posters?: string[];\n\n  cover: string;\n}\n\nexport const EditTop = React.forwardRef<EditTopHandles, unknown>(\n  (props, ref) => {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const [title, setTitle] = useEditableInput(\"\");\n    const [sub_title, setSubTitle] = useEditableInput(\"\");\n    const [description, setDescription] = useEditableInput(\"\");\n    const [posters, setPosters] = React.useState<string[]>([\n      \"https://static.runoob.com/images/demo/demo2.jpg\",\n      \"https://static.veer.com/veer/static/resources/keyword/2020-02-19/533ed30de651499da1c463bca44b6d60.jpg\"\n    ]);\n    const [cover, setCover] = React.useState<string>(\"\");\n\n    React.useEffect(() => {\n      if (posters && posters.length > 0) {\n        if (!cover || !posters.includes(cover)) setCover(posters[0]);\n      } else {\n        setCover(\"\");\n      }\n    }, [cover, posters]);\n\n    React.useImperativeHandle(ref, () => ({\n      title,\n      sub_title,\n      description,\n      posters,\n      cover\n    }));\n\n    const handleAddPoster = imageUrl => {\n      if (imageUrl && !posters.includes(imageUrl)) {\n        setPosters([...posters, imageUrl]);\n      }\n    };\n\n    const handleRemovePoster = (\n      e: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ) => {\n      const result = window.confirm(\"delete?\");\n      if (result) {\n        const { dataset } = e.currentTarget;\n        if (dataset.idx) {\n          posters.splice(+dataset.idx, 1);\n          setPosters([...posters]);\n        }\n      }\n    };\n\n    const handleChangeCover = (idx: number) => {\n      setCover(posters[idx]);\n    };\n\n    return (\n      <div className={classes.root}>\n        {posters.length ? (\n          <AutoPlaySwipeableViews\n            onChangeIndex={step => setActiveStep(step)}\n            index={activeStep}\n          >\n            {posters.map((image, idx) => {\n              return <Image key={idx} aspectRatio={16 / 9} src={image} />;\n            })}\n          </AutoPlaySwipeableViews>\n        ) : (\n          <Image aspectRatio={16 / 9} src={DEFULAT_MOVIE_COVER} />\n        )}\n\n        <div className={classes.aider}>\n          <div className={classes.aiderContent}>\n            <GridList cellHeight=\"auto\" cols={1}>\n              {posters.map((poster, idx) => (\n                <GridListTile key={poster} cols={1} className={classes.poster}>\n                  <Image\n                    aspectRatio={16 / 9}\n                    src={poster}\n                    alt={\"poster\" + idx}\n                  />\n                  <div className={classes.posterTool}>\n                    <div>\n                      <Tooltip\n                        TransitionComponent={Zoom}\n                        title=\"设成封面\"\n                        placement=\"bottom\"\n                        arrow\n                      >\n                        <Switch\n                          size=\"small\"\n                          color=\"primary\"\n                          checked={cover === poster}\n                          onChange={() => handleChangeCover(idx)}\n                        />\n                      </Tooltip>\n                    </div>\n                    <div data-idx={idx} onClick={handleRemovePoster}>\n                      <Tooltip\n                        TransitionComponent={Zoom}\n                        title=\"删除\"\n                        placement=\"bottom\"\n                        arrow\n                      >\n                        <IconButton size=\"medium\">\n                          <Delete fontSize=\"small\" />\n                        </IconButton>\n                      </Tooltip>\n                    </div>\n                  </div>\n                </GridListTile>\n              ))}\n              <GridListTile cols={1}>\n                <FileUpload onComplete={handleAddPoster} title=\"上传海报\" />\n              </GridListTile>\n            </GridList>\n          </div>\n        </div>\n        <div className={classes.main}>\n          <div className={classes.mainContent}>\n            <EditableInput\n              variant=\"h4\"\n              value={title}\n              onChange={setTitle}\n              placeholder=\"请输入标题\"\n            />\n            <EditableInput\n              value={sub_title}\n              onChange={setSubTitle}\n              placeholder=\"请输入副标题\"\n            />\n            <EditableInput\n              value={description}\n              onChange={setDescription}\n              placeholder=\"请输入电影描述...\"\n            />\n            <Box mt={3}>\n              <IconButton size=\"medium\" disabled>\n                <PlayCircleOutline fontSize=\"large\" />\n              </IconButton>\n            </Box>\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default EditTop;\n","import * as React from \"react\";\nimport {\n  Dialog,\n  Toolbar,\n  AppBar,\n  Button,\n  Box,\n  Theme,\n  makeStyles,\n  createStyles\n} from \"@material-ui/core\";\nimport {\n  FullScreen,\n  BodyScreen,\n  ContentScreen,\n  AiderScreen\n} from \"@/layouts/PageLayout\";\nimport { Image } from \"@/components/base/Image\";\nimport { DEFULAT_MOVIE_COVER } from \"@/common/constants/default.constant\";\nimport { Placeholder } from \"@/components/base/Placeholder\";\nimport { useEditableInput, EditableInput } from \"@/components/app/Input\";\nimport { FileUpload } from \"@/components/app/FileUpload\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      height: \"100%\"\n    },\n    body: {\n      backgroundColor: theme.palette.background.paper,\n      display: \"flex\",\n      margin: \"0 auto\"\n    },\n    content: {\n      padding: theme.spacing(2, 5),\n      borderRight: `1px solid ${theme.palette.divider}`\n    },\n    aider: {\n      padding: theme.spacing(2, 4),\n      height: \"100%\",\n      overflow: \"auto\"\n    },\n    sourceWrap: {\n      width: \"100%\",\n      position: \"relative\"\n    },\n    toolbarWrap: {\n      width: \"100%\",\n      display: \"flex\",\n      justifyContent: \"space-between\"\n    }\n  })\n);\n\nexport interface EditMediumInfoProp {\n  open: boolean;\n\n  onSave?(medium: unknown): void;\n\n  onCancel?(): void;\n}\n\nexport const EditMediumInfo: React.FC<EditMediumInfoProp> = (\n  props: EditMediumInfoProp\n) => {\n  const { onSave, onCancel } = props;\n\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [url, setUrl] = React.useState(\"\");\n  const [cover, setCover] = React.useState(\"\");\n  const [name, setName] = useEditableInput(\"\");\n  const [alias_name, setAliasName] = useEditableInput(\"\");\n  const [description, setDescription] = useEditableInput(\"\");\n\n  React.useEffect(() => {\n    setOpen(props.open);\n  }, [props.open]);\n\n  const reset = () => {\n    setOpen(false);\n    setUrl(\"\");\n    setCover(\"\");\n    setName(\"\");\n    setAliasName(\"\");\n    setDescription(\"\");\n  };\n\n  const handleChangeCover = imageUrl => {\n    if (imageUrl) {\n      setCover(imageUrl);\n    }\n  };\n\n  const handleChangeSource = sourceUrl => {\n    if (sourceUrl) {\n      setUrl(sourceUrl);\n    }\n  };\n\n  const handleSave = () => {\n    onSave &&\n      onSave({\n        url,\n        cover,\n        name,\n        alias_name,\n        description\n      });\n    handleCancle();\n  };\n\n  const handleCancle = () => {\n    setOpen(false);\n    onCancel && onCancel();\n    reset();\n  };\n\n  return (\n    <div>\n      <Dialog open={open} fullScreen onClose={handleCancle}>\n        <AppBar position=\"fixed\">\n          <Toolbar className={classes.toolbarWrap}>\n            <Button onClick={handleSave} color=\"inherit\">\n              保存\n            </Button>\n            <Button onClick={handleCancle} color=\"inherit\">\n              取消\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <Box className={classes.root}>\n          <Toolbar />\n          <FullScreen>\n            <BodyScreen>\n              <div className={classes.sourceWrap}>\n                <Image aspectRatio={16 / 9} src={DEFULAT_MOVIE_COVER} />\n                <FileUpload onComplete={handleChangeCover}>\n                  add cover\n                </FileUpload>\n                <FileUpload onComplete={handleChangeSource}>\n                  add source\n                </FileUpload>\n              </div>\n            </BodyScreen>\n          </FullScreen>\n          <BodyScreen className={classes.body}>\n            <ContentScreen className={classes.content}>\n              {/* <VideoInfo /> */}\n              {/* <NextPlay /> */}\n              <EditableInput\n                value={name}\n                onChange={setName}\n                placeholder=\"name\"\n              />\n              <EditableInput\n                value={alias_name}\n                onChange={setAliasName}\n                placeholder=\"alias_name\"\n              />\n              <EditableInput\n                value={description}\n                onChange={setDescription}\n                placeholder=\"description...\"\n              />\n            </ContentScreen>\n            <AiderScreen sticky className={classes.aider}>\n              {/* <Comment /> */}\n              <Placeholder title=\"评论区\" />\n            </AiderScreen>\n          </BodyScreen>\n        </Box>\n      </Dialog>\n    </div>\n  );\n};\n","import React from \"react\";\nimport {\n  Box,\n  Typography,\n  GridList,\n  GridListTile,\n  Button\n} from \"@material-ui/core\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport { MediaNormal } from \"@/components/app/Media\";\nimport { EditMediumInfo } from \"../EditMediumInfo\";\nimport { Placeholder } from \"@/components/base/Placeholder\";\n// import Placeholder from \"@/components/base/Placeholder\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(1, 0)\n    },\n    box: {\n      padding: theme.spacing(2, 0),\n\n      \"& + &\": {\n        borderTop: `1px solid ${theme.palette.divider}`\n      }\n    }\n  })\n);\n\nexport interface EditMainHandles {\n  mediums: any[];\n}\n\nexport const EditMain = React.forwardRef<EditMainHandles, unknown>(\n  (props, ref) => {\n    const classes = useStyles();\n    const [openMedium, setOpenMedium] = React.useState(false);\n    const [mediums, setMediums] = React.useState<any>([]);\n\n    React.useImperativeHandle(ref, () => ({\n      mediums: mediums\n    }));\n\n    const handleSave = medium => {\n      setMediums([...mediums, medium]);\n    };\n\n    return (\n      <>\n        <Box className={classes.root}>\n          <Box className={classes.box}>\n            <Typography variant=\"subtitle1\" gutterBottom>\n              相关资源\n            </Typography>\n            <GridList cellHeight=\"auto\" cols={4}>\n              {mediums.map((item, idx) => {\n                return (\n                  <GridListTile cols={1} key={idx}>\n                    <MediaNormal {...item} />\n                  </GridListTile>\n                );\n              })}\n\n              <Button onClick={() => setOpenMedium(true)}>\n                <Placeholder />\n              </Button>\n            </GridList>\n          </Box>\n          {/* <Box className={classes.box}>\n        <Typography variant=\"subtitle1\">精彩点评</Typography>\n      </Box> */}\n        </Box>\n        <EditMediumInfo\n          open={openMedium}\n          onSave={handleSave}\n          onCancel={() => setOpenMedium(false)}\n        />\n      </>\n    );\n  }\n);\n\nexport default EditMain;\n","export * from \"./EditAbout\";\nexport * from \"./EditCast\";\nexport * from \"./EditTop\";\nexport * from \"./EditMain\";\n","import * as React from \"react\";\nimport { EditMain } from \"../movies/MovieUpload/modules\";\nimport { ContentScreen } from \"@/layouts/PageLayout\";\n\nconst Test: React.FC = () => {\n  return (\n    <div>\n      <ContentScreen>\n        <EditMain />\n      </ContentScreen>\n    </div>\n  );\n};\n\nexport default Test;\n"],"sourceRoot":""}