{"version":3,"sources":["../node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs","../node_modules/graphql/jsutils/inspect.mjs","../node_modules/graphql/language/blockString.mjs","../node_modules/graphql/language/kinds.mjs","../node_modules/graphql/language/printer.mjs","../node_modules/graphql/utilities/getOperationAST.mjs","../node_modules/graphql/jsutils/devAssert.mjs","../node_modules/graphql/jsutils/defineToJSON.mjs","../node_modules/graphql/jsutils/isObjectLike.mjs","../node_modules/graphql/language/location.mjs","../node_modules/graphql/language/printLocation.mjs","../node_modules/graphql/error/GraphQLError.mjs","../node_modules/graphql/error/syntaxError.mjs","../node_modules/graphql/language/source.mjs","../node_modules/graphql/jsutils/defineToStringTag.mjs","../node_modules/graphql/language/tokenKind.mjs","../node_modules/graphql/language/lexer.mjs","../node_modules/graphql/language/directiveLocation.mjs","../node_modules/graphql/language/parser.mjs","../node_modules/graphql/language/visitor.mjs"],"names":["nodejsCustomInspectSymbol","Symbol","for","undefined","_typeof","obj","iterator","constructor","prototype","inspect","value","formatValue","seenValues","JSON","stringify","name","concat","previouslySeenValues","indexOf","customInspectFn","object","String","getCustomFn","customValue","call","Array","isArray","array","length","len","Math","min","remaining","items","i","push","join","formatArray","keys","Object","tag","toString","replace","getObjectTag","map","key","formatObject","formatObjectValue","dedentBlockStringValue","rawString","lines","split","commonIndent","line","indent","leadingWhitespace","getBlockStringIndentation","slice","isBlank","shift","pop","str","printBlockString","indentation","arguments","preferMultipleLines","isSingleLine","hasLeadingSpace","hasTrailingQuote","printAsMultipleLines","result","Kind","freeze","NAME","DOCUMENT","OPERATION_DEFINITION","VARIABLE_DEFINITION","SELECTION_SET","FIELD","ARGUMENT","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","VARIABLE","INT","FLOAT","STRING","BOOLEAN","NULL","ENUM","LIST","OBJECT","OBJECT_FIELD","DIRECTIVE","NAMED_TYPE","LIST_TYPE","NON_NULL_TYPE","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","OBJECT_TYPE_DEFINITION","FIELD_DEFINITION","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","UNION_TYPE_DEFINITION","ENUM_TYPE_DEFINITION","ENUM_VALUE_DEFINITION","INPUT_OBJECT_TYPE_DEFINITION","DIRECTIVE_DEFINITION","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","print","ast","leave","printDocASTReducer","Name","node","Variable","Document","definitions","OperationDefinition","op","operation","varDefs","wrap","variableDefinitions","directives","selectionSet","VariableDefinition","_ref","variable","type","defaultValue","SelectionSet","_ref2","block","selections","Field","_ref3","alias","args","Argument","_ref4","FragmentSpread","_ref5","InlineFragment","_ref6","typeCondition","FragmentDefinition","_ref7","IntValue","_ref8","FloatValue","_ref9","StringValue","_ref10","BooleanValue","_ref11","NullValue","EnumValue","_ref12","ListValue","_ref13","values","ObjectValue","_ref14","fields","ObjectField","_ref15","Directive","_ref16","NamedType","_ref17","ListType","_ref18","NonNullType","_ref19","SchemaDefinition","_ref20","operationTypes","OperationTypeDefinition","_ref21","ScalarTypeDefinition","addDescription","_ref22","ObjectTypeDefinition","_ref23","interfaces","FieldDefinition","_ref24","hasMultilineItems","InputValueDefinition","_ref25","InterfaceTypeDefinition","_ref26","UnionTypeDefinition","_ref27","types","EnumTypeDefinition","_ref28","EnumValueDefinition","_ref29","InputObjectTypeDefinition","_ref30","DirectiveDefinition","_ref31","repeatable","locations","SchemaExtension","_ref32","ScalarTypeExtension","_ref33","ObjectTypeExtension","_ref34","InterfaceTypeExtension","_ref35","UnionTypeExtension","_ref36","EnumTypeExtension","_ref37","InputObjectTypeExtension","_ref38","cb","description","maybeArray","separator","filter","x","start","maybeString","end","isMultiline","string","some","getOperationAST","documentAST","operationName","_i2","_documentAST$definiti2","definition","kind","devAssert","condition","message","Boolean","Error","defineToJSON","classObject","fn","toJSON","getLocation","source","position","match","lineRegexp","column","exec","body","index","printLocation","location","printSourceLocation","sourceLocation","firstLineColumnOffset","locationOffset","whitespace","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","locationLine","sublineIndex","floor","sublineColumnNum","sublines","printPrefixedLines","subline","existingLines","padLen","max","apply","prefix","GraphQLError","nodes","positions","path","originalError","extensions","_nodes","_source","loc","_locations","_positions","reduce","list","pos","_extensions","originalExtensions","defineProperties","this","enumerable","writable","stack","defineProperty","configurable","captureStackTrace","syntaxError","create","error","output","_error$nodes2","_i4","_error$locations2","printError","toStringTag","get","TokenKind","SOF","EOF","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","BLOCK_STRING","COMMENT","advanceLexer","lastToken","token","lookahead","next","readToken","Tok","prev","printCharCode","code","isNaN","fromCharCode","toUpperCase","lexer","bodyLength","startPosition","charCodeAt","lineStart","positionAfterWhitespace","col","readComment","readName","firstCode","isFloat","readDigits","readNumber","chunkStart","rawValue","readBlockString","charCode","a","b","c","d","char2hex","invalidSequence","readString","unexpectedCharacterMessage","DirectiveLocation","QUERY","MUTATION","SUBSCRIPTION","SCHEMA","SCALAR","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","parse","options","parseDocument","parseValue","parser","expectToken","parseValueLiteral","parseType","parseTypeReference","Parser","sourceObj","_lexer","startOfFileToken","advance","createLexer","_options","_proto","parseName","many","parseDefinition","peek","parseOperationDefinition","parseFragmentDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","peekDescription","unexpected","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","parseVariableDefinition","parseVariable","expectOptionalToken","parseSelection","parseFragment","parseField","nameOrAlias","parseArguments","isConst","item","parseConstArgument","parseArgument","hasTypeCondition","expectOptionalKeyword","parseFragmentName","parseNamedType","expectKeyword","experimentalFragmentVariables","parseList","parseObject","parseStringLiteral","_this","any","_this2","parseObjectField","parseDirective","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","parseOperationTypeDefinition","parseImplementsInterfaces","parseFieldsDefinition","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","parseArgumentDefs","parseInputValueDef","parseUnionMemberTypes","parseEnumValuesDefinition","parseEnumValueDefinition","parseInputFieldsDefinition","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","parseDirectiveLocations","parseDirectiveLocation","startToken","noLocation","Loc","getTokenDesc","atToken","openKind","parseFn","closeKind","endToken","QueryDocumentKeys","BREAK","visit","root","visitor","visitorKeys","inArray","edits","parent","ancestors","newRoot","isLeaving","isEdited","clone","_Object$keys2","k","editOffset","ii","editKey","editValue","splice","isNode","visitFn","getVisitFn","maybeNode","kindVisitor","kindSpecificVisitor","enter","specificVisitor","specificKindVisitor"],"mappings":"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","file":"static/js/npm.graphql.40441168.chunk.js","sourcesContent":["var nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;\nexport default nodejsCustomInspectSymbol;","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport nodejsCustomInspectSymbol from './nodejsCustomInspectSymbol';\nvar MAX_ARRAY_LENGTH = 10;\nvar MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport default function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (_typeof(value)) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? \"[function \".concat(value.name, \"]\") : '[function]';\n\n    case 'object':\n      if (value === null) {\n        return 'null';\n      }\n\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (previouslySeenValues.indexOf(value) !== -1) {\n    return '[Circular]';\n  }\n\n  var seenValues = [].concat(previouslySeenValues, [value]);\n  var customInspectFn = getCustomFn(value);\n\n  if (customInspectFn !== undefined) {\n    // $FlowFixMe(>=0.90.0)\n    var customValue = customInspectFn.call(value); // check for infinite recursion\n\n    if (customValue !== value) {\n      return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction formatObject(object, seenValues) {\n  var keys = Object.keys(object);\n\n  if (keys.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  var properties = keys.map(function (key) {\n    var value = formatValue(object[key], seenValues);\n    return key + ': ' + value;\n  });\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  var len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  var remaining = array.length - len;\n  var items = [];\n\n  for (var i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(\"... \".concat(remaining, \" more items\"));\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getCustomFn(object) {\n  var customInspectFn = object[String(nodejsCustomInspectSymbol)];\n\n  if (typeof customInspectFn === 'function') {\n    return customInspectFn;\n  }\n\n  if (typeof object.inspect === 'function') {\n    return object.inspect;\n  }\n}\n\nfunction getObjectTag(object) {\n  var tag = Object.prototype.toString.call(object).replace(/^\\[object /, '').replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    var name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}","/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(lines);\n\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n} // @internal\n\nexport function getBlockStringIndentation(lines) {\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    if (commonIndent === null || indent < commonIndent) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  return commonIndent === null ? 0 : commonIndent;\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\n\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}","/**\n * The set of allowed kind values for AST nodes.\n */\nexport var Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */","import { visit } from './visitor';\nimport { printBlockString } from './blockString';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, {\n    leave: printDocASTReducer\n  });\n} // TODO: provide better type coverage in future\n\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n  // Document\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue,\n        directives = _ref.directives;\n    return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));\n  },\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');\n  },\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n  // Fragments\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        variableDefinitions = _ref7.variableDefinitions,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return (// Note: fragment variable definitions are experimental and may be changed\n      // or removed in the future.\n      \"fragment \".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), \" \") + \"on \".concat(typeCondition, \" \").concat(wrap('', join(directives, ' '), ' ')) + selectionSet\n    );\n  },\n  // Value\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10, key) {\n    var value = _ref10.value,\n        isBlockString = _ref10.block;\n    return isBlockString ? printBlockString(value, key === 'description' ? '' : '  ') : JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return value ? 'true' : 'false';\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n  // Directive\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n  // Type\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n  // Type System Definitions\n  SchemaDefinition: function SchemaDefinition(_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n  ScalarTypeDefinition: addDescription(function (_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  }),\n  ObjectTypeDefinition: addDescription(function (_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  FieldDefinition: addDescription(function (_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));\n  }),\n  InputValueDefinition: addDescription(function (_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  }),\n  InterfaceTypeDefinition: addDescription(function (_ref26) {\n    var name = _ref26.name,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  UnionTypeDefinition: addDescription(function (_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  }),\n  EnumTypeDefinition: addDescription(function (_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  }),\n  EnumValueDefinition: addDescription(function (_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  }),\n  InputObjectTypeDefinition: addDescription(function (_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  DirectiveDefinition: addDescription(function (_ref31) {\n    var name = _ref31.name,\n        args = _ref31.arguments,\n        repeatable = _ref31.repeatable,\n        locations = _ref31.locations;\n    return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');\n  }),\n  SchemaExtension: function SchemaExtension(_ref32) {\n    var directives = _ref32.directives,\n        operationTypes = _ref32.operationTypes;\n    return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  ScalarTypeExtension: function ScalarTypeExtension(_ref33) {\n    var name = _ref33.name,\n        directives = _ref33.directives;\n    return join(['extend scalar', name, join(directives, ' ')], ' ');\n  },\n  ObjectTypeExtension: function ObjectTypeExtension(_ref34) {\n    var name = _ref34.name,\n        interfaces = _ref34.interfaces,\n        directives = _ref34.directives,\n        fields = _ref34.fields;\n    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {\n    var name = _ref35.name,\n        directives = _ref35.directives,\n        fields = _ref35.fields;\n    return join(['extend interface', name, join(directives, ' '), block(fields)], ' ');\n  },\n  UnionTypeExtension: function UnionTypeExtension(_ref36) {\n    var name = _ref36.name,\n        directives = _ref36.directives,\n        types = _ref36.types;\n    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  },\n  EnumTypeExtension: function EnumTypeExtension(_ref37) {\n    var name = _ref37.name,\n        directives = _ref37.directives,\n        values = _ref37.values;\n    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');\n  },\n  InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {\n    var name = _ref38.name,\n        directives = _ref38.directives,\n        fields = _ref38.fields;\n    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');\n  }\n};\n\nfunction addDescription(cb) {\n  return function (node) {\n    return join([node.description, cb(node)], '\\n');\n  };\n}\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\n\nfunction join(maybeArray, separator) {\n  return maybeArray ? maybeArray.filter(function (x) {\n    return x;\n  }).join(separator || '') : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\n\n\nfunction block(array) {\n  return array && array.length !== 0 ? '{\\n' + indent(join(array, '\\n')) + '\\n}' : '';\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise\n * print an empty string.\n */\n\n\nfunction wrap(start, maybeString, end) {\n  return maybeString ? start + maybeString + (end || '') : '';\n}\n\nfunction indent(maybeString) {\n  return maybeString && '  ' + maybeString.replace(/\\n/g, '\\n  ');\n}\n\nfunction isMultiline(string) {\n  return string.indexOf('\\n') !== -1;\n}\n\nfunction hasMultilineItems(maybeArray) {\n  return maybeArray && maybeArray.some(isMultiline);\n}","import { Kind } from '../language/kinds';\n/**\n * Returns an operation AST given a document AST and optionally an operation\n * name. If a name is not provided, an operation is only returned if only one is\n * provided in the document.\n */\n\nexport function getOperationAST(documentAST, operationName) {\n  var operation = null;\n\n  for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {\n    var definition = _documentAST$definiti2[_i2];\n\n    if (definition.kind === Kind.OPERATION_DEFINITION) {\n      if (!operationName) {\n        // If no operation name was provided, only return an Operation if there\n        // is one defined in the document. Upon encountering the second, return\n        // null.\n        if (operation) {\n          return null;\n        }\n\n        operation = definition;\n      } else if (definition.name && definition.name.value === operationName) {\n        return definition;\n      }\n    }\n  }\n\n  return operation;\n}","export default function devAssert(condition, message) {\n  var booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}","import nodejsCustomInspectSymbol from './nodejsCustomInspectSymbol';\n/**\n * The `defineToJSON()` function defines toJSON() and inspect() prototype\n * methods, if no function provided they become aliases for toString().\n */\n\nexport default function defineToJSON(classObject) {\n  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : classObject.prototype.toString;\n  classObject.prototype.toJSON = fn;\n  classObject.prototype.inspect = fn;\n\n  if (nodejsCustomInspectSymbol) {\n    classObject.prototype[nodejsCustomInspectSymbol] = fn;\n  }\n}","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\n\n\nexport default function isObjectLike(value) {\n  return _typeof(value) == 'object' && value !== null;\n}","/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line: line,\n    column: column\n  };\n}","import { getLocation } from '../language/location';\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printLocation(location) {\n  return printSourceLocation(location.source, getLocation(location.source, location.start));\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  var firstLineColumnOffset = source.locationOffset.column - 1;\n  var body = whitespace(firstLineColumnOffset) + source.body;\n  var lineIndex = sourceLocation.line - 1;\n  var lineOffset = source.locationOffset.line - 1;\n  var lineNum = sourceLocation.line + lineOffset;\n  var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  var columnNum = sourceLocation.column + columnOffset;\n  var locationStr = \"\".concat(source.name, \":\").concat(lineNum, \":\").concat(columnNum, \"\\n\");\n  var lines = body.split(/\\r\\n|[\\n\\r]/g);\n  var locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    var sublineIndex = Math.floor(columnNum / 80);\n    var sublineColumnNum = columnNum % 80;\n    var sublines = [];\n\n    for (var i = 0; i < locationLine.length; i += 80) {\n      sublines.push(locationLine.slice(i, i + 80));\n    }\n\n    return locationStr + printPrefixedLines([[\"\".concat(lineNum), sublines[0]]].concat(sublines.slice(1, sublineIndex + 1).map(function (subline) {\n      return ['', subline];\n    }), [[' ', whitespace(sublineColumnNum - 1) + '^'], ['', sublines[sublineIndex + 1]]]));\n  }\n\n  return locationStr + printPrefixedLines([// Lines specified like this: [\"prefix\", \"string\"],\n  [\"\".concat(lineNum - 1), lines[lineIndex - 1]], [\"\".concat(lineNum), locationLine], ['', whitespace(columnNum - 1) + '^'], [\"\".concat(lineNum + 1), lines[lineIndex + 1]]]);\n}\n\nfunction printPrefixedLines(lines) {\n  var existingLines = lines.filter(function (_ref) {\n    var _ = _ref[0],\n        line = _ref[1];\n    return line !== undefined;\n  });\n  var padLen = Math.max.apply(Math, existingLines.map(function (_ref2) {\n    var prefix = _ref2[0];\n    return prefix.length;\n  }));\n  return existingLines.map(function (_ref3) {\n    var prefix = _ref3[0],\n        line = _ref3[1];\n    return lpad(padLen, prefix) + (line ? ' | ' + line : ' |');\n  }).join('\\n');\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction lpad(len, str) {\n  return whitespace(len - str.length) + str;\n}","import isObjectLike from '../jsutils/isObjectLike';\nimport { getLocation } from '../language/location';\nimport { printLocation, printSourceLocation } from '../language/printLocation';\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport function GraphQLError( // eslint-disable-line no-redeclare\nmessage, nodes, source, positions, path, originalError, extensions) {\n  // Compute list of blame nodes.\n  var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n  var _source = source;\n\n  if (!_source && _nodes) {\n    var node = _nodes[0];\n    _source = node && node.loc && node.loc.source;\n  }\n\n  var _positions = positions;\n\n  if (!_positions && _nodes) {\n    _positions = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(node.loc.start);\n      }\n\n      return list;\n    }, []);\n  }\n\n  if (_positions && _positions.length === 0) {\n    _positions = undefined;\n  }\n\n  var _locations;\n\n  if (positions && source) {\n    _locations = positions.map(function (pos) {\n      return getLocation(source, pos);\n    });\n  } else if (_nodes) {\n    _locations = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(getLocation(node.loc.source, node.loc.start));\n      }\n\n      return list;\n    }, []);\n  }\n\n  var _extensions = extensions;\n\n  if (_extensions == null && originalError != null) {\n    var originalExtensions = originalError.extensions;\n\n    if (isObjectLike(originalExtensions)) {\n      _extensions = originalExtensions;\n    }\n  }\n\n  Object.defineProperties(this, {\n    message: {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      writable: true\n    },\n    locations: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _locations || undefined,\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_locations)\n    },\n    path: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: path || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(path)\n    },\n    nodes: {\n      value: _nodes || undefined\n    },\n    source: {\n      value: _source || undefined\n    },\n    positions: {\n      value: _positions || undefined\n    },\n    originalError: {\n      value: originalError\n    },\n    extensions: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _extensions || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_extensions)\n    }\n  }); // Include (non-enumerable) stack trace.\n\n  if (originalError && originalError.stack) {\n    Object.defineProperty(this, 'stack', {\n      value: originalError.stack,\n      writable: true,\n      configurable: true\n    });\n  } else if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, GraphQLError);\n  } else {\n    Object.defineProperty(this, 'stack', {\n      value: Error().stack,\n      writable: true,\n      configurable: true\n    });\n  }\n}\nGraphQLError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: GraphQLError\n  },\n  name: {\n    value: 'GraphQLError'\n  },\n  toString: {\n    value: function toString() {\n      return printError(this);\n    }\n  }\n});\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\n\nexport function printError(error) {\n  var output = error.message;\n\n  if (error.nodes) {\n    for (var _i2 = 0, _error$nodes2 = error.nodes; _i2 < _error$nodes2.length; _i2++) {\n      var node = _error$nodes2[_i2];\n\n      if (node.loc) {\n        output += '\\n\\n' + printLocation(node.loc);\n      }\n    }\n  } else if (error.source && error.locations) {\n    for (var _i4 = 0, _error$locations2 = error.locations; _i4 < _error$locations2.length; _i4++) {\n      var location = _error$locations2[_i4];\n      output += '\\n\\n' + printSourceLocation(error.source, location);\n    }\n  }\n\n  return output;\n}","import { GraphQLError } from './GraphQLError';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(\"Syntax Error: \".concat(description), undefined, source, [position]);\n}","import devAssert from '../jsutils/devAssert';\nimport defineToStringTag from '../jsutils/defineToStringTag';\n/**\n * A representation of source input to GraphQL.\n * `name` and `locationOffset` are optional. They are useful for clients who\n * store GraphQL documents in source files; for example, if the GraphQL input\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\n * line and column in locationOffset are 1-indexed\n */\n\nexport var Source = function Source(body, name, locationOffset) {\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || {\n    line: 1,\n    column: 1\n  };\n  this.locationOffset.line > 0 || devAssert(0, 'line in locationOffset is 1-indexed and must be positive');\n  this.locationOffset.column > 0 || devAssert(0, 'column in locationOffset is 1-indexed and must be positive');\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(Source);","/**\n * The `defineToStringTag()` function checks first to see if the runtime\n * supports the `Symbol` class and then if the `Symbol.toStringTag` constant\n * is defined as a `Symbol` instance. If both conditions are met, the\n * Symbol.toStringTag property is defined as a getter that returns the\n * supplied class constructor's name.\n *\n * @method defineToStringTag\n *\n * @param {Class<any>} classObject a class such as Object, String, Number but\n * typically one of your own creation through the class keyword; `class A {}`,\n * for example.\n */\nexport default function defineToStringTag(classObject) {\n  if (typeof Symbol === 'function' && Symbol.toStringTag) {\n    Object.defineProperty(classObject.prototype, Symbol.toStringTag, {\n      get: function get() {\n        return this.constructor.name;\n      }\n    });\n  }\n}","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */","import defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { dedentBlockStringValue } from './blockString';\nimport { TokenKind } from './tokenKind';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n// @internal\n\n\nexport function isPunctuatorToken(token) {\n  var kind = token.kind;\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Tok, function () {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n});\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = body.charCodeAt(pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * character, then returns the position of that character for lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or e\n\n\n  if (code === 46 || code === 69 || code === 101) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n}","/**\n * The set of allowed directive location values.\n */\nexport var DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */","import inspect from '../jsutils/inspect';\nimport devAssert from '../jsutils/devAssert';\nimport defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { Kind } from './kinds';\nimport { Source } from './source';\nimport { createLexer } from './lexer';\nimport { DirectiveLocation } from './directiveLocation';\nimport { TokenKind } from './tokenKind';\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\n\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(source, options) {\n    var sourceObj = typeof source === 'string' ? new Source(source) : source;\n    sourceObj instanceof Source || devAssert(0, \"Must provide Source. Received: \".concat(inspect(sourceObj)));\n    this._lexer = createLexer(sourceObj);\n    this._options = options || {};\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  var _proto = Parser.prototype;\n\n  _proto.parseName = function parseName() {\n    var token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n  ;\n\n  _proto.parseDocument = function parseDocument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */\n  ;\n\n  _proto.parseDefinition = function parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseOperationDefinition = function parseOperationDefinition() {\n    var start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    var operation = this.parseOperationType();\n    var name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: operation,\n      name: name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n  ;\n\n  _proto.parseOperationType = function parseOperationType() {\n    var operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n\n      case 'mutation':\n        return 'mutation';\n\n      case 'subscription':\n        return 'subscription';\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n  ;\n\n  _proto.parseVariableDefinitions = function parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseVariableDefinition = function parseVariableDefinition() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */\n  ;\n\n  _proto.parseVariable = function parseVariable() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */\n  ;\n\n  _proto.parseSelectionSet = function parseSelectionSet() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n  ;\n\n  _proto.parseSelection = function parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n  ;\n\n  _proto.parseField = function parseField() {\n    var start = this._lexer.token;\n    var nameOrAlias = this.parseName();\n    var alias;\n    var name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return {\n      kind: Kind.FIELD,\n      alias: alias,\n      name: name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n  ;\n\n  _proto.parseArguments = function parseArguments(isConst) {\n    var item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseArgument = function parseArgument() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name: name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  };\n\n  _proto.parseConstArgument = function parseConstArgument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseFragment = function parseFragment() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    var hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n  ;\n\n  _proto.parseFragmentDefinition = function parseFragmentDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.experimentalFragmentVariables) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n  ;\n\n  _proto.parseFragmentName = function parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n  ;\n\n  _proto.parseValueLiteral = function parseValueLiteral(isConst) {\n    var token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        if (token.value === 'true' || token.value === 'false') {\n          this._lexer.advance();\n\n          return {\n            kind: Kind.BOOLEAN,\n            value: token.value === 'true',\n            loc: this.loc(token)\n          };\n        } else if (token.value === 'null') {\n          this._lexer.advance();\n\n          return {\n            kind: Kind.NULL,\n            loc: this.loc(token)\n          };\n        }\n\n        this._lexer.advance();\n\n        return {\n          kind: Kind.ENUM,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n\n        break;\n    }\n\n    throw this.unexpected();\n  };\n\n  _proto.parseStringLiteral = function parseStringLiteral() {\n    var token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n  ;\n\n  _proto.parseList = function parseList(isConst) {\n    var _this = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this.parseValueLiteral(isConst);\n    };\n\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */\n  ;\n\n  _proto.parseObject = function parseObject(isConst) {\n    var _this2 = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this2.parseObjectField(isConst);\n    };\n\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseObjectField = function parseObjectField(isConst) {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name: name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n  ;\n\n  _proto.parseDirectives = function parseDirectives(isConst) {\n    var directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */\n  ;\n\n  _proto.parseDirective = function parseDirective(isConst) {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n  ;\n\n  _proto.parseTypeReference = function parseTypeReference() {\n    var start = this._lexer.token;\n    var type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n  ;\n\n  _proto.parseNamedType = function parseNamedType() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  };\n\n  _proto.peekDescription = function peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n  ;\n\n  _proto.parseDescription = function parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n   */\n  ;\n\n  _proto.parseSchemaDefinition = function parseSchemaDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n  ;\n\n  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {\n    var start = this._lexer.token;\n    var operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation: operation,\n      type: type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n  ;\n\n  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n  ;\n\n  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {\n    var types = [];\n\n    if (this.expectOptionalKeyword('implements')) {\n      // Optional leading ampersand\n      this.expectOptionalToken(TokenKind.AMP);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.AMP) || // Legacy support for the SDL?\n      this._options.allowLegacySDLImplementsInterfaces && this.peek(TokenKind.NAME));\n    }\n\n    return types;\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */\n  ;\n\n  _proto.parseFieldsDefinition = function parseFieldsDefinition() {\n    // Legacy support for the SDL?\n    if (this._options.allowLegacySDLEmptyFields && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {\n      this._lexer.advance();\n\n      this._lexer.advance();\n\n      return [];\n    }\n\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n  ;\n\n  _proto.parseFieldDefinition = function parseFieldDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      type: type,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n  ;\n\n  _proto.parseArgumentDefs = function parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseInputValueDef = function parseInputValueDef() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      type: type,\n      defaultValue: defaultValue,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n  ;\n\n  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n  ;\n\n  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {\n    var types = [];\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      // Optional leading pipe\n      this.expectOptionalToken(TokenKind.PIPE);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.PIPE));\n    }\n\n    return types;\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n  ;\n\n  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */\n  ;\n\n  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */\n  ;\n\n  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n  ;\n\n  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */\n  ;\n\n  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {\n    var keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */\n  ;\n\n  _proto.parseSchemaExtension = function parseSchemaExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n  ;\n\n  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *   - extend interface Name Directives[Const]? FieldsDefinition\n   *   - extend interface Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n  ;\n\n  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n  ;\n\n  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */\n  ;\n\n  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    var repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    var locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      repeatable: repeatable,\n      locations: locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n  ;\n\n  _proto.parseDirectiveLocations = function parseDirectiveLocations() {\n    // Optional leading pipe\n    this.expectOptionalToken(TokenKind.PIPE);\n    var locations = [];\n\n    do {\n      locations.push(this.parseDirectiveLocation());\n    } while (this.expectOptionalToken(TokenKind.PIPE));\n\n    return locations;\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n  ;\n\n  _proto.parseDirectiveLocation = function parseDirectiveLocation() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in\n   * the source that created a given parsed object.\n   */\n  ;\n\n  _proto.loc = function loc(startToken) {\n    if (!this._options.noLocation) {\n      return new Loc(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n  ;\n\n  _proto.peek = function peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectToken = function expectToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and return undefined.\n   */\n  ;\n\n  _proto.expectOptionalToken = function expectOptionalToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectKeyword = function expectKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing\n   * the lexer. Otherwise, do not change the parser state and return \"false\".\n   */\n  ;\n\n  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token\n   * is encountered.\n   */\n  ;\n\n  _proto.unexpected = function unexpected(atToken) {\n    var token = atToken || this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.any = function any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always\n   * return non-empty list that begins with a lex token of openKind and ends\n   * with a lex token of closeKind. Advances the parser to the next lex token\n   * after the closing token.\n   */\n  ;\n\n  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.many = function many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  };\n\n  return Parser;\n}();\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Loc, function () {\n  return {\n    start: this.start,\n    end: this.end\n  };\n});\n/**\n * A helper function to describe a token as a string for debugging\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}","import inspect from '../jsutils/inspect';\nexport var QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nexport var BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexport function visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n  /* eslint-disable no-undef-init */\n\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {\n            var k = _Object$keys2[_i2];\n            clone[k] = node[k];\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error('Invalid AST Node: ' + inspect(node));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] || [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n\nfunction isNode(maybeNode) {\n  return Boolean(maybeNode && typeof maybeNode.kind === 'string');\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\n\nexport function visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      false);\n\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      true);\n      var result;\n\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}"],"sourceRoot":""}