{"version":3,"sources":["../node_modules/@apollo/client/react/ssr/RenderPromises.js","../node_modules/@apollo/client/index.js","views/Test/index.tsx"],"names":["RenderPromises","this","queryPromises","Map","queryInfoTrie","prototype","registerSSRObservable","observable","props","lookupQueryInfo","getSSRObservable","addQueryPromise","queryInstance","finish","getOptions","seen","set","Promise","resolve","fetchData","hasPromises","size","consumeAndAwaitPromises","_this","promises","forEach","promise","push","clear","all","query","variables","varMap","get","has","variablesString","JSON","stringify","info","UPLOAD_FILE","gql","Test","useMutation","onCompleted","data","console","log","onError","error","upload_file_oss","type","onChange","e","dir","currentTarget","validity","file","files"],"mappings":"uPAOqB,WACnB,SAASA,IACPC,KAAKC,cAAgB,IAAIC,IACzBF,KAAKG,cAAgB,IAAID,IAG3BH,EAAeK,UAAUC,sBAAwB,SAAUC,EAAYC,GACrEP,KAAKQ,gBAAgBD,GAAOD,WAAaA,GAG3CP,EAAeK,UAAUK,iBAAmB,SAAUF,GACpD,OAAOP,KAAKQ,gBAAgBD,GAAOD,YAGrCP,EAAeK,UAAUM,gBAAkB,SAAUC,EAAeC,GAGlE,OAFWZ,KAAKQ,gBAAgBG,EAAcE,cAEpCC,KAOHF,KANLZ,KAAKC,cAAcc,IAAIJ,EAAcE,aAAc,IAAIG,SAAQ,SAAUC,GACvEA,EAAQN,EAAcO,iBAEjB,OAMXnB,EAAeK,UAAUe,YAAc,WACrC,OAAOnB,KAAKC,cAAcmB,KAAO,GAGnCrB,EAAeK,UAAUiB,wBAA0B,WACjD,IAAIC,EAAQtB,KAERuB,EAAW,GAMf,OALAvB,KAAKC,cAAcuB,SAAQ,SAAUC,EAASd,GAC5CW,EAAMd,gBAAgBG,GAAeG,MAAO,EAC5CS,EAASG,KAAKD,MAEhBzB,KAAKC,cAAc0B,QACZX,QAAQY,IAAIL,IAGrBxB,EAAeK,UAAUI,gBAAkB,SAAUD,GACnD,IAAIJ,EAAgBH,KAAKG,cACrB0B,EAAQtB,EAAMsB,MACdC,EAAYvB,EAAMuB,UAClBC,EAAS5B,EAAc6B,IAAIH,IAAU,IAAI3B,IACxCC,EAAc8B,IAAIJ,IAAQ1B,EAAcY,IAAIc,EAAOE,GACxD,IAAIG,EAAkBC,KAAKC,UAAUN,GACjCO,EAAON,EAAOC,IAAIE,IAxDjB,CACLpB,MAAM,EACNR,WAAY,MAwDZ,OADKyB,EAAOE,IAAIC,IAAkBH,EAAOhB,IAAImB,EAAiBG,GACvDA,GApDU,GCPrB,qC,iOCGA,IAAMC,EAAcC,YAAH,KAqCFC,UA/BQ,WAAO,IAAD,EACDC,YAAYH,EAAa,CACjDI,YADiD,SACrCC,GACVC,QAAQC,IAAIF,IAEdG,QAJiD,SAIzCC,GACNH,QAAQC,IAAIE,MALTC,EADoB,oBAsB3B,OACE,2BACE,2BACE,yBAAOC,KAAK,OAAOC,SAfN,SAACC,GAClBP,QAAQQ,IAAID,EAAEE,eAD+C,MAKzDF,EAAEE,cAFJC,EAH2D,EAG3DA,SACQC,EAJmD,cAI3DC,MAJ2D,MAMzDF,IACFN,EAAgB,CAAElB,UAAW,CAAEyB,UAC/BX,QAAQC,IAAIU","file":"static/js/9.6f945d62.chunk.js","sourcesContent":["function makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n\n  RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n    this.lookupQueryInfo(props).observable = observable;\n  };\n\n  RenderPromises.prototype.getSSRObservable = function (props) {\n    return this.lookupQueryInfo(props).observable;\n  };\n\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance.getOptions());\n\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n\n    return finish();\n  };\n\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n\n  RenderPromises.prototype.lookupQueryInfo = function (props) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var query = props.query,\n        variables = props.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n\n  return RenderPromises;\n}();\n\nexport { RenderPromises };","export { default as Observable } from 'zen-observable';\nexport { isReference, makeReference } from './utilities/graphql/storeUtils.js';\nexport { ApolloLink } from './link/core/ApolloLink.js';\nexport { execute } from './link/core/execute.js';\nexport { ApolloError, isApolloError } from './errors/ApolloError.js';\nexport { NetworkStatus } from './core/networkStatus.js';\nexport { ObservableQuery } from './core/ObservableQuery.js';\nexport { makeVar } from './cache/inmemory/reactiveVars.js';\nexport { serializeFetchParameter } from './link/http/serializeFetchParameter.js';\nexport { selectURI } from './link/http/selectURI.js';\nexport { throwServerError } from './link/utils/throwServerError.js';\nexport { parseAndCheckHttpResponse } from './link/http/parseAndCheckHttpResponse.js';\nexport { checkFetcher } from './link/http/checkFetcher.js';\nexport { fallbackHttpConfig, selectHttpOptionsAndBody } from './link/http/selectHttpOptionsAndBody.js';\nexport { createSignalIfSupported } from './link/http/createSignalIfSupported.js';\nexport { rewriteURIForGET } from './link/http/rewriteURIForGET.js';\nexport { fromError } from './link/utils/fromError.js';\nexport { createHttpLink } from './link/http/createHttpLink.js';\nexport { HttpLink } from './link/http/HttpLink.js';\nexport { ApolloClient } from './ApolloClient.js';\nexport { ApolloCache } from './cache/core/cache.js';\nexport { Cache } from './cache/core/types/Cache.js';\nexport { MissingFieldError } from './cache/core/types/common.js';\nexport { defaultDataIdFromObject } from './cache/inmemory/policies.js';\nexport { InMemoryCache } from './cache/inmemory/inMemoryCache.js';\nexport { empty } from './link/core/empty.js';\nexport { from } from './link/core/from.js';\nexport { split } from './link/core/split.js';\nexport { concat } from './link/core/concat.js';\nexport { toPromise } from './link/utils/toPromise.js';\nexport { fromPromise } from './link/utils/fromPromise.js';\nexport { default as gql } from 'graphql-tag';\nexport { disableExperimentalFragmentVariables, disableFragmentWarnings, enableExperimentalFragmentVariables, resetCaches } from './core/index.js';\nexport { getApolloContext, resetApolloContext } from './react/context/ApolloContext.js';\nexport { ApolloProvider } from './react/context/ApolloProvider.js';\nexport { ApolloConsumer } from './react/context/ApolloConsumer.js';\nexport { DocumentType, operationName, parser } from './react/parser/parser.js';\nexport { useQuery } from './react/hooks/useQuery.js';\nexport { useLazyQuery } from './react/hooks/useLazyQuery.js';\nexport { useMutation } from './react/hooks/useMutation.js';\nexport { useSubscription } from './react/hooks/useSubscription.js';\nexport { useApolloClient } from './react/hooks/useApolloClient.js';\nexport { RenderPromises } from './react/ssr/RenderPromises.js';","import * as React from \"react\";\nimport { useMutation, gql } from \"@apollo/client\";\n\nconst UPLOAD_FILE = gql`\n  mutation($file: Upload!) {\n    upload_file_oss(file: $file)\n  }\n`;\n\nconst Test: React.FC = () => {\n  const [upload_file_oss] = useMutation(UPLOAD_FILE, {\n    onCompleted(data) {\n      console.log(data);\n    },\n    onError(error) {\n      console.log(error);\n    }\n  });\n\n  const fileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    console.dir(e.currentTarget);\n    const {\n      validity,\n      files: [file]\n    } = e.currentTarget;\n    if (validity) {\n      upload_file_oss({ variables: { file } });\n      console.log(file);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <input type=\"file\" onChange={fileChange} />\n      </div>\n    </div>\n  );\n};\n\nexport default Test;\n"],"sourceRoot":""}