{"version":3,"sources":["components/base/Editor/NormalEditor.tsx","views/movies/MovieUpload/modules/EditAbout/index.tsx","views/movies/MovieUpload/modules/EditCast/index.tsx","components/app/Input/useEditableInput.tsx","components/app/Input/EditableInput.tsx","views/movies/MovieUpload/modules/EditTop/index.tsx","views/movies/MovieUpload/modules/EditMediumInfo/index.tsx","views/movies/MovieUpload/modules/EditMain/index.tsx","views/movies/MovieUpload/index.tsx"],"names":["NormalEditor","React","props","ref","raw","onBlur","placeholder","EditorState","createWithContent","convertFromRaw","JSON","parse","createEmpty","editorState","setEditorState","getRawString","stringify","convertToRaw","getCurrentContent","onChange","EditAbout","aboutRaw","setAboutRaw","about","editorRef","rawString","current","useStyles","makeStyles","theme","createStyles","root","backgroundColor","palette","background","paper","EditCast","classes","credits","setCredits","handleChange","e","target","dataset","value","idx","key","cur","handleDelete","currentTarget","newCredits","splice","Box","className","List","subheader","ListSubheader","Typography","IconButton","onClick","avatar","name","description","tags","size","AddCircle","fontSize","length","map","item","ListItem","ListItemAvatar","Avatar","src","ListItemText","primary","Input","data-idx","data-key","secondary","ListItemSecondaryAction","Delete","Placeholder","title","useEditableInput","initValue","setValue","input","borderColor","EditableInput","position","width","aider","left","top","bottom","padding","spacing","aiderContent","borderRadius","shape","height","backdropFilter","overflow","main","right","transform","color","display","flexDirection","mainContent","posters","posterTool","EditTop","setTitle","sub_title","setSubTitle","setDescription","setPosters","cover","setCover","includes","handleRemovePoster","window","confirm","handleChangeCover","Image","aspectRatio","DEFULAT_MOVIE_COVER","GridList","cellHeight","cols","poster","GridListTile","alt","imageUrl","prompt","gutterBottom","variant","component","mt","Button","disabled","body","margin","content","borderRight","divider","sourceWrap","EditMediumInfo","onSave","onCancel","open","setOpen","url","alias_name","medium","setMedium","handleCancle","Dialog","fullScreen","onClose","AppBar","Toolbar","sourceUrl","inputProps","rows","sticky","box","borderTop","EditMain","forwardRef","useState","openMedium","setOpenMedium","mediums","setMediums","useImperativeHandle","Media","MovieUpload","tab","setTab","topRef","mainRef","aboutRef","castRef","useCreateMovieMutation","create_movie","Tabs","val","Tab","label","hidden","topFields","mainFields","aboutFields","castFields","variables","movie","sources"],"mappings":"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","file":"static/js/16.c7ad50bb.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { Editor, EditorState, convertFromRaw, convertToRaw } from \"draft-js\";\nimport \"draft-js/dist/Draft.css\";\nimport { BaseEditorProps, BaseEditorHandles } from \"./editor\";\n\nexport const NormalEditor = React.forwardRef<\n  BaseEditorHandles,\n  BaseEditorProps\n>((props, ref) => {\n  const { raw, onBlur, placeholder } = props;\n  const [editorState, setEditorState] = React.useState(() =>\n    raw\n      ? EditorState.createWithContent(convertFromRaw(JSON.parse(raw)))\n      : EditorState.createEmpty()\n  );\n\n  React.useImperativeHandle(ref, () => ({\n    getRawString: () => {\n      return JSON.stringify(convertToRaw(editorState.getCurrentContent()));\n    }\n  }));\n\n  return (\n    <Editor\n      editorState={editorState}\n      onChange={setEditorState}\n      onBlur={onBlur}\n      placeholder={placeholder}\n    />\n  );\n});\n","import * as React from \"react\";\nimport { NormalEditor } from \"@/components/base/Editor\";\nimport { EditorHandles } from \"@/components/base/Editor/editor\";\n\nexport interface EditAboutHandles {\n  about?: string;\n}\n\nexport const EditAbout = React.forwardRef<EditAboutHandles, unknown>(\n  (props, ref) => {\n    const [aboutRaw, setAboutRaw] = React.useState(\"\");\n\n    React.useImperativeHandle(ref, () => ({\n      about: aboutRaw\n    }));\n    const editorRef = React.createRef<EditorHandles>();\n\n    const handleBlur = () => {\n      const rawString = editorRef.current?.getRawString();\n      setAboutRaw(rawString);\n    };\n\n    return (\n      <div>\n        <NormalEditor ref={editorRef} onBlur={handleBlur} />\n      </div>\n    );\n  }\n);\n\nexport default EditAbout;\n","import * as React from \"react\";\nimport {\n  List,\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  Box,\n  ListSubheader,\n  Typography,\n  Input\n} from \"@material-ui/core\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport { AddCircle, Delete } from \"@material-ui/icons\";\nimport { Placeholder } from \"@/components/base/Placeholder\";\nimport { Character } from \"@/schema\";\n\nexport interface CharacterEdit extends Character {\n  // status:\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper\n    }\n  })\n);\n\nexport interface EditCastHandles {\n  credits: CharacterEdit[];\n}\n\nexport const EditCast = React.forwardRef<EditCastHandles, unknown>(\n  (props, ref) => {\n    const classes = useStyles();\n    const [credits, setCredits] = React.useState<CharacterEdit[]>([]);\n\n    React.useImperativeHandle(ref, () => ({\n      credits\n    }));\n\n    const handleAddCredit = () => {\n      setCredits([\n        ...credits,\n        {\n          avatar: \"\",\n          name: \"\",\n          description: \"\",\n          tags: []\n        }\n      ]);\n    };\n\n    const handleChange = (\n      e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n    ) => {\n      const { dataset, value } = e.target;\n      if (dataset.idx && dataset.key) {\n        const cur = credits[dataset.idx];\n        cur[dataset.key] = value;\n        setCredits([...credits, cur]);\n      }\n    };\n\n    const handleDelete = (\n      e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n    ) => {\n      const { dataset } = e.currentTarget;\n      if (dataset.idx) {\n        const newCredits = credits.splice(+dataset.idx, 1);\n        setCredits([...newCredits]);\n      }\n    };\n\n    return (\n      <Box className={classes.root}>\n        <List\n          subheader={\n            <ListSubheader>\n              <Typography>演职表</Typography>\n              <IconButton onClick={handleAddCredit} size=\"small\">\n                <AddCircle fontSize=\"small\" />\n              </IconButton>\n            </ListSubheader>\n          }\n        >\n          {credits.length ? (\n            <>\n              {credits.map((item, idx) => {\n                return (\n                  <ListItem key={idx}>\n                    {\n                      <div>\n                        <ListItemAvatar>\n                          <Avatar src={item.avatar}></Avatar>\n                        </ListItemAvatar>\n                      </div>\n                    }\n                    <ListItemText\n                      primary={\n                        <div>\n                          <Input\n                            data-idx={idx}\n                            data-key=\"name\"\n                            onChange={handleChange}\n                            value={item.name}\n                            placeholder=\"请输入名字\"\n                          />\n                        </div>\n                      }\n                      secondary={\n                        <div>\n                          <Input\n                            data-idx={idx}\n                            data-key=\"description\"\n                            value={item.description}\n                            placeholder=\"请输入描述\"\n                          />\n                        </div>\n                      }\n                    />\n                    <ListItemSecondaryAction>\n                      {/* <IconButton>\n                      <Edit />\n                    </IconButton> */}\n                      {/* <IconButton>\n                      <Done />\n                    </IconButton> */}\n                      <IconButton data-idx={idx} onClick={handleDelete}>\n                        <Delete />\n                      </IconButton>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                );\n              })}\n            </>\n          ) : (\n            <div>\n              <Placeholder title=\"请添加演职人员\" />\n            </div>\n          )}\n        </List>\n      </Box>\n    );\n  }\n);\n\nexport default EditCast;\n","import * as React from \"react\";\n\nexport const useEditableInput = (initValue: any): [any, any] => {\n  const [value, setValue] = React.useState(initValue);\n\n  const onChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setValue(e.target.value);\n  };\n\n  return [value, onChange];\n};\n","import * as React from \"react\";\nimport { Input, makeStyles, Theme, createStyles } from \"@material-ui/core\";\nimport { BaseInputProps } from \"./input\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {},\n    input: {\n      borderColor: \"transparent\"\n    }\n  })\n);\n\nexport const EditableInput: React.FC<BaseInputProps> = props => {\n  const { value, onChange, placeholder } = props;\n  const classes = useStyles();\n  return (\n    <Input\n      classes={{\n        root: classes.root\n      }}\n      //   inputProps={{ \"data-key\": \"title\" }}\n      value={value}\n      onChange={onChange}\n      placeholder={placeholder}\n    />\n  );\n};\n","import * as React from \"react\";\nimport { Image } from \"@/components/base/Image\";\nimport { DEFULAT_MOVIE_COVER } from \"@/common/constants/default.constant\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport {\n  Typography,\n  Button,\n  Box,\n  GridList,\n  GridListTile\n} from \"@material-ui/core\";\n\nimport { useEditableInput, EditableInput } from \"@/components/app/Input\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      position: \"relative\",\n      width: \"100%\"\n    },\n    aider: {\n      position: \"absolute\",\n      left: 0,\n      top: 0,\n      bottom: 0,\n      width: \"45%\",\n      padding: theme.spacing(8)\n    },\n    aiderContent: {\n      width: \"50%\",\n      padding: theme.spacing(2),\n      borderRadius: theme.shape.borderRadius,\n      height: \"100%\",\n      background: \"rgba(0, 0, 0, .1)\",\n      backdropFilter: \"blur(8px)\",\n      overflow: \"auto\"\n    },\n    main: {\n      position: \"absolute\",\n      top: \"50%\",\n      right: 0,\n      width: \"50%\",\n      padding: theme.spacing(0, 8),\n      transform: \"translate(0, -50%)\",\n      color: \"#fff\",\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    mainContent: {\n      background: \"rgba(0, 0, 0, .1)\",\n      backdropFilter: \"blur(8px)\",\n      padding: theme.spacing(4),\n      borderRadius: theme.shape.borderRadius\n    },\n    posters: {},\n    posterTool: {\n      display: \"none\"\n    }\n  })\n);\n\nexport interface EditTopHandles {\n  title: string;\n\n  sub_title?: string;\n\n  description?: string;\n\n  posters?: string[];\n\n  cover: string;\n}\n\nexport const EditTop = React.forwardRef<EditTopHandles, unknown>(\n  (props, ref) => {\n    const classes = useStyles();\n    const [title, setTitle] = useEditableInput(\"\");\n    const [sub_title, setSubTitle] = useEditableInput(\"\");\n    const [description, setDescription] = useEditableInput(\"\");\n    const [posters, setPosters] = React.useState<string[]>([]);\n    const [cover, setCover] = React.useState<string>(\"\");\n\n    React.useEffect(() => {\n      if (posters && posters.length > 0) {\n        if (!cover || !posters.includes(cover)) setCover(posters[0]);\n      } else {\n        setCover(\"\");\n      }\n    }, [cover, posters]);\n\n    React.useImperativeHandle(ref, () => ({\n      title,\n      sub_title,\n      description,\n      posters,\n      cover\n    }));\n\n    const handleAddPoster = () => {\n      const imageUrl = prompt(\"image url.\");\n      if (imageUrl && !posters.includes(imageUrl)) {\n        setPosters([...posters, imageUrl]);\n      }\n    };\n\n    const handleRemovePoster = (\n      e: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ) => {\n      const result = window.confirm(\"delete?\");\n      if (result) {\n        const { dataset } = e.currentTarget;\n        if (dataset.idx) {\n          posters.splice(+dataset.idx, 1);\n          setPosters([...posters]);\n        }\n      }\n    };\n\n    const handleChangeCover = (\n      e: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ) => {\n      const { dataset } = e.currentTarget;\n      if (dataset.idx) {\n        setCover(posters[dataset.idx]);\n      }\n    };\n\n    return (\n      <div className={classes.root}>\n        <Image aspectRatio={16 / 9} src={DEFULAT_MOVIE_COVER} />\n        <div className={classes.aider}>\n          <div className={classes.aiderContent}>\n            <GridList cellHeight=\"auto\" className={classes.posters} cols={1}>\n              {posters.map((poster, idx) => (\n                <GridListTile key={poster} cols={1}>\n                  <Image\n                    aspectRatio={16 / 9}\n                    src={poster}\n                    alt={\"poster\" + idx}\n                  />\n                  <div className={classes.posterTool}>\n                    <div data-idx={idx} onClick={handleRemovePoster}>\n                      remove poster\n                    </div>\n                    <div data-idx={idx} onClick={handleChangeCover}>\n                      {cover === poster ? \"is cover\" : \"isn't cover\"}\n                    </div>\n                  </div>\n                </GridListTile>\n              ))}\n              <GridListTile cols={1} onClick={handleAddPoster}>\n                <img alt=\"add poster\" />\n              </GridListTile>\n            </GridList>\n          </div>\n        </div>\n        <div className={classes.main}>\n          <div className={classes.mainContent}>\n            <Typography gutterBottom variant=\"h4\" component=\"div\">\n              <EditableInput\n                value={title}\n                onChange={setTitle}\n                placeholder=\"movie title\"\n              />\n            </Typography>\n            <Typography gutterBottom variant=\"subtitle1\" component=\"div\">\n              <EditableInput\n                value={sub_title}\n                onChange={setSubTitle}\n                placeholder=\"请输入副标题\"\n              />\n            </Typography>\n            <Typography variant=\"body2\" component=\"div\">\n              <EditableInput\n                value={description}\n                onChange={setDescription}\n                placeholder=\"请输入电影描述...\"\n              />\n            </Typography>\n            <Box mt={3}>\n              <Button disabled size=\"large\" variant=\"contained\" color=\"primary\">\n                播放\n              </Button>\n            </Box>\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default EditTop;\n","import * as React from \"react\";\nimport {\n  Dialog,\n  Toolbar,\n  AppBar,\n  Button,\n  Box,\n  Theme,\n  makeStyles,\n  createStyles,\n  Input,\n  Typography\n} from \"@material-ui/core\";\nimport {\n  FullScreen,\n  BodyScreen,\n  ContentScreen,\n  AiderScreen\n} from \"@/layouts/PageLayout\";\nimport { Image } from \"@/components/base/Image\";\nimport { DEFULAT_MOVIE_COVER } from \"@/common/constants/default.constant\";\nimport { Placeholder } from \"@/components/base/Placeholder\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      height: \"100%\"\n    },\n    body: {\n      backgroundColor: theme.palette.background.paper,\n      display: \"flex\",\n      margin: \"0 auto\"\n    },\n    content: {\n      padding: theme.spacing(2, 5),\n      borderRight: `1px solid ${theme.palette.divider}`\n    },\n    aider: {\n      padding: theme.spacing(2, 4),\n      height: \"100%\",\n      overflow: \"auto\"\n    },\n    sourceWrap: {\n      width: \"100%\",\n      position: \"relative\"\n    }\n  })\n);\n\nexport interface EditMediumInfoProp {\n  open: boolean;\n\n  onSave?(medium: unknown): void;\n\n  onCancel?(): void;\n}\n\nexport const EditMediumInfo: React.FC<EditMediumInfoProp> = (\n  props: EditMediumInfoProp\n) => {\n  const { onSave, onCancel } = props;\n\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [medium, setMedium] = React.useState({\n    name: \"\",\n    url: \"\",\n    alias_name: \"\",\n    description: \"\",\n    cover: \"\"\n  });\n\n  React.useEffect(() => {\n    setOpen(props.open);\n  }, [props.open]);\n\n  const reset = () => {\n    setOpen(false);\n    setMedium({\n      name: \"\",\n      url: \"\",\n      alias_name: \"\",\n      description: \"\",\n      cover: \"\"\n    });\n  };\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    const { dataset, value } = e.target;\n    if (dataset.key) {\n      setMedium({\n        ...medium,\n        [dataset.key]: value\n      });\n    }\n  };\n\n  const handleChangeCover = () => {\n    const imageUrl = prompt(\"image url.\");\n    if (imageUrl) {\n      setMedium({\n        ...medium,\n        cover: imageUrl\n      });\n    }\n  };\n\n  const handleChangeSource = () => {\n    const sourceUrl = prompt(\"source url.\");\n    if (sourceUrl) {\n      setMedium({\n        ...medium,\n        cover: sourceUrl\n      });\n    }\n  };\n\n  const handleSave = () => {\n    onSave && onSave(medium);\n    handleCancle();\n  };\n\n  const handleCancle = () => {\n    setOpen(false);\n    onCancel && onCancel();\n    reset();\n  };\n\n  return (\n    <div>\n      <Dialog open={open} fullScreen onClose={handleCancle}>\n        <AppBar position=\"relative\">\n          <Toolbar>\n            <Button onClick={handleSave} color=\"inherit\">\n              save\n            </Button>\n            <Button onClick={handleCancle} color=\"inherit\">\n              cancle\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <Box className={classes.root}>\n          <FullScreen>\n            <BodyScreen>\n              <div className={classes.sourceWrap}>\n                <Image aspectRatio={16 / 9} src={DEFULAT_MOVIE_COVER} />\n                <div onClick={handleChangeCover}>add cover</div>\n                <div onClick={handleChangeSource}>add source</div>\n              </div>\n            </BodyScreen>\n          </FullScreen>\n          <BodyScreen className={classes.body}>\n            <ContentScreen className={classes.content}>\n              {/* <VideoInfo /> */}\n              {/* <NextPlay /> */}\n              <Typography>\n                <Input\n                  inputProps={{ \"data-key\": \"name\" }}\n                  value={medium.name}\n                  onChange={handleChange}\n                  placeholder=\"name\"\n                />\n              </Typography>\n              <Typography>\n                <Input\n                  inputProps={{ \"data-key\": \"alias_name\" }}\n                  value={medium.alias_name}\n                  onChange={handleChange}\n                  placeholder=\"alias_name\"\n                />\n              </Typography>\n              <Typography>\n                <Input\n                  rows={4}\n                  inputProps={{ \"data-key\": \"description\" }}\n                  value={medium.description}\n                  onChange={handleChange}\n                  placeholder=\"description...\"\n                />\n              </Typography>\n            </ContentScreen>\n            <AiderScreen sticky className={classes.aider}>\n              {/* <Comment /> */}\n              <Placeholder title=\"评论区\" />\n            </AiderScreen>\n          </BodyScreen>\n        </Box>\n      </Dialog>\n    </div>\n  );\n};\n","import React from \"react\";\nimport {\n  Box,\n  Typography,\n  GridList,\n  GridListTile,\n  Button\n} from \"@material-ui/core\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport { MediaNormal } from \"@/components/app/Media\";\nimport { EditMediumInfo } from \"../EditMediumInfo\";\n// import Placeholder from \"@/components/base/Placeholder\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(1, 0)\n    },\n    box: {\n      padding: theme.spacing(2, 0),\n\n      \"& + &\": {\n        borderTop: `1px solid ${theme.palette.divider}`\n      }\n    }\n  })\n);\n\nexport interface EditMainHandles {\n  mediums: any[];\n}\n\nexport const EditMain = React.forwardRef<EditMainHandles, unknown>(\n  (props, ref) => {\n    const classes = useStyles();\n    const [openMedium, setOpenMedium] = React.useState(false);\n    const [mediums, setMediums] = React.useState<any>([]);\n\n    React.useImperativeHandle(ref, () => ({\n      mediums: mediums\n    }));\n\n    const handleSave = medium => {\n      setMediums([...mediums, medium]);\n    };\n\n    return (\n      <>\n        <Box className={classes.root}>\n          <Box className={classes.box}>\n            <Typography variant=\"subtitle1\" gutterBottom>\n              相关资源\n            </Typography>\n            <GridList cellHeight=\"auto\" cols={4}>\n              {mediums.map((item, idx) => {\n                return (\n                  <GridListTile cols={1} key={idx}>\n                    <MediaNormal {...item} />\n                  </GridListTile>\n                );\n              })}\n\n              <Button onClick={() => setOpenMedium(true)}>添加</Button>\n            </GridList>\n          </Box>\n          {/* <Box className={classes.box}>\n        <Typography variant=\"subtitle1\">精彩点评</Typography>\n      </Box> */}\n        </Box>\n        <EditMediumInfo\n          open={openMedium}\n          onSave={handleSave}\n          onCancel={() => setOpenMedium(false)}\n        />\n      </>\n    );\n  }\n);\n\nexport default EditMain;\n","import * as React from \"react\";\nimport {\n  EditAbout,\n  EditCast,\n  EditMain,\n  EditTop,\n  EditCastHandles,\n  EditTopHandles,\n  EditMainHandles,\n  EditAboutHandles\n} from \"./modules\";\nimport {\n  ContentScreen,\n  AiderScreen,\n  FullScreen,\n  BodyScreen\n} from \"@/layouts/PageLayout\";\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  Box,\n  Tabs,\n  Tab\n} from \"@material-ui/core\";\nimport { useCreateMovieMutation } from \"@/schema\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    main: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(1, 6),\n      borderRight: `1px solid ${theme.palette.divider}`\n    }\n  })\n);\n\nexport const MovieUpload: React.FC = () => {\n  const classes = useStyles();\n  const [tab, setTab] = React.useState(0);\n  const topRef = React.createRef<EditTopHandles>();\n  const mainRef = React.createRef<EditMainHandles>();\n  const aboutRef = React.createRef<EditAboutHandles>();\n  const castRef = React.createRef<EditCastHandles>();\n\n  const [create_movie] = useCreateMovieMutation();\n\n  const handleCreateMovie = () => {\n    const topFields = topRef.current;\n    const mainFields = mainRef.current;\n    const aboutFields = aboutRef.current;\n    const castFields = castRef.current;\n\n    create_movie({\n      variables: {\n        movie: {\n          title: topFields?.title || \"\",\n          cover: topFields?.cover || \"\",\n          posters: topFields?.posters,\n          description: topFields?.description,\n          credits: castFields?.credits,\n          about: aboutFields?.about,\n          sources: mainFields?.mediums\n        }\n      }\n    });\n  };\n\n  return (\n    <Box>\n      <FullScreen>\n        <BodyScreen>\n          <EditTop ref={topRef} />\n        </BodyScreen>\n      </FullScreen>\n      <BodyScreen>\n        <ContentScreen className={classes.main}>\n          <Tabs value={tab} onChange={(e, val) => setTab(val)}>\n            <Tab label=\"信息\"></Tab>\n            <Tab label=\"相关推荐\" disabled></Tab>\n            <Tab label=\"关于\"></Tab>\n          </Tabs>\n          <div>\n            <div hidden={tab !== 0}>\n              <EditMain ref={mainRef} />\n            </div>\n            {/* {tab === 1 && <Relative />} */}\n            <div hidden={tab !== 2}>\n              <EditAbout ref={aboutRef} />\n            </div>\n            <div>\n              <div onClick={handleCreateMovie}>create</div>\n            </div>\n          </div>\n        </ContentScreen>\n        <AiderScreen>\n          <EditCast ref={castRef} />\n        </AiderScreen>\n      </BodyScreen>\n    </Box>\n  );\n};\nexport default MovieUpload;\n"],"sourceRoot":""}